<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on savchenko.tech</title>
        <link>https://savchenko.tech/posts/</link>
        <description>Recent content in Posts on savchenko.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Fri, 30 May 2025 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://savchenko.tech/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Project Valhalla: Codes Like a Class, Works Like an int</title>
            <link>https://savchenko.tech/posts/valhalla/</link>
            <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/valhalla/</guid>
            <description>What is Project Valhalla? When Java applications create many objects, performance suffers significantly. Each object requires memory allocation on the heap, carries overhead from object headers, and forces the garbage collector to work harder. This becomes especially problematic in data-intensive applications where simple data structures like coordinates, colors, or mathematical values are wrapped in heavyweight objects. Project Valhalla is Oracle&amp;rsquo;s ambitious initiative to bring value types to the Java platform. It aims to provide &amp;ldquo;codes like a class, works like an int&amp;rdquo; semantics.</description>
            <content type="html"><![CDATA[<h3 id="what-is-project-valhalla">What is Project Valhalla?</h3>
<p>When Java applications create many objects, performance suffers significantly. Each object requires memory allocation on the heap, carries overhead from object headers, and forces the garbage collector to work harder.
This becomes especially problematic in data-intensive applications where simple data structures like coordinates, colors, or mathematical values are wrapped in heavyweight objects.
Project Valhalla is Oracle&rsquo;s ambitious initiative to bring value types to the Java platform. It aims to provide &ldquo;codes like a class, works like an int&rdquo; semantics.
Value types allow developers to create custom data types that behave like primitives in terms of memory layout and performance while maintaining the expressiveness of classes.</p>
<h3 id="the-core-problems-valhalla-solves">The Core Problems Valhalla Solves</h3>
<p>Traditional Java forces a trade-off between abstraction and performance. You can either use primitives for speed or objects for abstraction, but not both.
A simple Point class with x and y coordinates requires two object allocations plus overhead, consuming far more memory than necessary.
Generic collections suffer particularly from this limitation. An ArrayList of Integers must box each primitive int into an Integer object.
This creates millions of unnecessary objects and pointer indirections that slow down processing.</p>
<h3 id="value-classes-the-solution">Value Classes: The Solution</h3>
<p>Value classes look like regular classes but behave fundamentally differently. They have no identity, cannot be null, and are immutable by default.
The JVM can store them inline without object headers or heap allocation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> value <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> x;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> y;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Point</span>(<span style="color:#66d9ef">int</span> x, <span style="color:#66d9ef">int</span> y) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> x;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> y;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">x</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">y</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> y;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This Point value class consumes only 8 bytes of memory instead of the 24+ bytes required by a traditional object.</p>
<h3 id="generic-specialization">Generic Specialization</h3>
<p>Valhalla also introduces generic specialization. Current Java generics use type erasure, forcing all generic types to work with Object references. This prevents efficient storage of primitives in collections.
Specialized generics allow collections to work directly with value types and primitives. An ArrayList of Points can store the Point data inline without boxing or pointer indirection.</p>
<h3 id="performance-benefits">Performance Benefits</h3>
<p>Early benchmarks show dramatic improvements. Arrays of value types can be 2-4x faster to process than arrays of objects. Memory usage drops by 50-75% in many cases.
Cache performance improves significantly because related data stays together in memory.
Garbage collection pressure decreases substantially. Fewer objects mean fewer allocations and less work for the garbage collector. Applications spend more time doing useful work instead of managing memory.</p>
<h3 id="current-status-and-timeline">Current Status and Timeline</h3>
<p>Project Valhalla remains in active development. Preview builds are available for experimentation, but the feature set continues to evolve.
The full integration of Valhalla&rsquo;s features, including value classes, is expected to take place over several releases, with the first preview potentially appearing in JDK 23.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Project Valhalla will significantly improve Java performance. Applications will use less memory and run faster. This is excellent news for developers building high-performance systems.
However, Valhalla makes Java more complex. Java currently has objects and primitives. Valhalla adds three new types: value classes, primitive classes, and (heaven help us) identity classes.
New developers must now learn five different type categories instead of two.
This creates challenges for beginners. They need to understand when to use each type and how they behave differently. The simple &ldquo;everything is an object&rdquo; mental model no longer applies.</p>
<p>Java adds new features to stay competitive, but each addition makes the language harder to learn. This creates a paradox: the very changes meant to keep Java relevant may drive away new developers.</p>
<p>Sources:</p>
<ol>
<li><a href="https://openjdk.org/projects/valhalla/">Project Valhalla</a></li>
<li><a href="https://inside.java/2024/12/16/devoxxbelgium-valhalla/">Valhalla - Java&rsquo;s Epic Refactor, Brian Goetz</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>On Productivity</title>
            <link>https://savchenko.tech/posts/productivity/</link>
            <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/productivity/</guid>
            <description>Nearly three years of constant bad news stream and realization that the world is not going to become &amp;ldquo;better&amp;rdquo;, made me reflect deeply on my personal productivity. As usual, I started by revisiting the definition of productivity itself. What does it truly mean? That’s where I found myself stuck, right from the start.
Internet searches offered only vague and abstract explanations: words like quantity, quality, continuous learning, innovation, and responsibility for your work dominated the definitions.</description>
            <content type="html"><![CDATA[<p><img src="../../images/img.png" alt="img.png"></p>
<p>Nearly three years of constant bad news stream and realization that the world is not going to become &ldquo;better&rdquo;, made me reflect
deeply on my personal productivity. As usual, I started by revisiting the definition of productivity itself.
What does it truly mean? That’s where I found myself stuck, right from the start.</p>
<p>Internet searches offered only vague and abstract explanations:
words like quantity, quality, continuous learning, innovation, and responsibility
for your work dominated the definitions.
However, none of these descriptions included specific goals or metrics to measure productivity effectively.
So, it appeared nobody knows how to define and measure it.
Even Tom Davenport, who studied the performance of knowledge workers earlier in his career, seems to have abandoned this topic.</p>
<blockquote>
<p><strong>Knowledge work</strong></p>
<p>&ldquo;The economic activity in which knowledge is transformed into an artifact with market value through the application of cognitive effort.&rdquo;</p>
</blockquote>
<p>I was pleasantly surprised to discover Cal Newport&rsquo;s book, <a href="https://www.amazon.de/Slow-Productivity-Accomplishment-Without-Burnout/dp/0593719433">Slow Productivity</a>,
which starts a conversation on such an important topic that no one wants to touch.</p>
<p>In this book, Cal highlights a critical issue: the absence of a standardized framework for measuring productivity in such a large economic sector as knowledge work
and taking pseudo productivity as a default standard.</p>
<blockquote>
<p><strong>Pseudo productivity</strong></p>
<p>&ldquo;The use of visible activity as a measurement of productive effort.&rdquo;</p>
</blockquote>
<p>The Pseudo productivity reinforces not only getting thing done, but doing it at any cost.
It does not take into account both natural human pace and disruptive life events,
you suppose to remain productive even if your eyes are bleeding and the world is burning around you.</p>
<p>Technological advancements gave us the ability to stick more into our day.
Ironically, the more we clear the deck, the more tasks seem to pile onto it.
And no one is going to tell you how much is enough — that is up to you. Good luck with that!</p>
<p>This is where the most damaging outcome arises.
Combination of an infinite list of tasks to do, no capacity to do these tasks with proper quality
and no definition of how to measure the output can lead only to one thing - burnout.
And let&rsquo;s not forget that AI supposed to increase it to 60%, something that we do not know how to measure.</p>
<p>According to <a href="https://www.jetbrains.com/lp/devecosystem-2023/">The State of Developer Ecosystem 2023</a>,
75% of developers reported experiencing burnout — an extremely disturbing statistic.
Last year, JetBrains didn’t include a survey question on burnout, which I find a bit disappointing.
From my own conversations with developers, nearly all have admitted they were either close to burnout or had already experienced it.</p>
<p>The constant overload is generated by a belief that &ldquo;good work&rdquo; requires increasing busyness — faster responses to emails
and chats, more meetings, more tasks, more commits, more hours.
But we don’t need statistics to recognize that trying to complete as many tasks as possible, at all times, is neither humane nor effective.</p>
<p>Is there a more sustainable way of work?
Cal Newport offers us to slow down and introduces us to the alternative &ldquo;Slow Productivity&rdquo; concept.
Let&rsquo;s take a look at its principles.</p>
<blockquote>
<ol>
<li><strong>Do fewer things</strong>.
&ldquo;Strive to reduce your obligations to the point where you can easily imagine accomplishing them with time to spare.
Leverage this reduced load to more fully embrace and advance the small number of projects that matter most.&rdquo;</li>
</ol>
</blockquote>
<p>Overloading yourself is exhausting, unsustainable, and a miserable way to exist.
This principle tells us to prioritize the most important tasks and move them to the top of your list. Let go of the rest.
Focusing on a small number of tasks, waiting to finish one task before bringing something new
is a much better way to use our brains and produce valuable output.</p>
<blockquote>
<ol start="2">
<li><strong>Work at natural pace</strong>.
&ldquo;Do not rush your most important work. Allow it instead to unfold along a sustainable timeline
with variations in intensity in settings conductive to brilliance.&rdquo;</li>
</ol>
</blockquote>
<p>The reality is that humans are terrible at estimating cognitive work. We are always going for the most optimistic scenario.
This bias comes from a lack of physical intuition about mental effort.
Cal advises us to double our &ldquo;guessing&rdquo; estimation and plan leisure time wisely.
Additionally, cutting your task list from 25 to 50 % will also help to tackle wildly optimistic prejudice.</p>
<blockquote>
<ol start="3">
<li><strong>Obsess over quality</strong>.
&ldquo;Obsess over the quality of what you produce, even if this means missing opportunities in the short term.
Leverage the value of these results to gain more and more freedom in your efforts over the long term.&rdquo;</li>
</ol>
</blockquote>
<p>Focus on the quality of the core activities in your professional life.
This approach not only enhances your skills but also helps to escape a trap of pseudo-productivity.
Quality demands slowness, which leads to a more meaningful outcome.</p>
<p>This is just a sneak peek into strategies for avoiding the chaos of pseudo-productivity.
If you&rsquo;re looking for more advice on creating a sustainable work life — or curious about how brewing beer
once kept Jane Austen from writing &ldquo;Sense and Sensibility&rdquo; — I highly recommend reading a book by Cal Newport. It’s truly worth your time.
I applied some of these principles in my life last year with partial success. However,
implementing them fully requires a significant degree of autonomy — something most of us, if we’re honest, rarely have.
But as I mentioned earlier, the world isn’t going to magically improve, so we need to focus on what we can change.
We can take ownership of our priorities, learn to say no, and find genuine satisfaction in the work we do.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Slow-Productivity-Accomplishment-Without-Burnout/dp/0593719433">Slow Productivity: The Lost Art of Accomplishment Without Burnout by Cal Newport</a></li>
<li><a href="https://www.amazon.de/-/en/Oliver-Burkeman-ebook/dp/B07X3DH41F/ref=sr_1_1?adgrpid=77884664144&amp;dib=eyJ2IjoiMSJ9.mUhffU_aU8QrxlJxElooWdxQlW2aWtqQVAF1OPZAwXvcCs-Rc3jXNfptnRfI8aA4COwyElosaw4qWhIDxXxKHway-bpPk4kfVh5XkDt7Cho32bLHvycPtLyTzMtIvzNNam38n-Q1X3P40WLrCTRGVGUzMuqWnb7KKgKKEfSDuo2jsptokRHtS_fijjVsW_5dDGQCqvQPM0dO3lGNd2hQj1CnkJqriVNNUsqbjZa_fyM.AMFXbAG006Qh0ujI55HAbhd0jpC7hp0UUPgctVwz-VU&amp;dib_tag=se&amp;hvadid=676471286094&amp;hvdev=c&amp;hvlocphy=9042532&amp;hvnetw=g&amp;hvqmt=e&amp;hvrand=3219326851621090541&amp;hvtargid=kwd-1212439606455&amp;hydadcr=22113_2353113&amp;keywords=time+management+for+mortals&amp;nsdOptOutParam=true&amp;qid=1735462588&amp;sr=8-1">Four Thousand Weeks by Oliver Burkeman</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Certifications. Learning Tool or Misuse of Human Energy?</title>
            <link>https://savchenko.tech/posts/certifications/</link>
            <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/certifications/</guid>
            <description>Certifications have always been a controversial topic for me. They’re either dismissed as time-wasters or celebrated as career boosters. When people ask me, &amp;ldquo;Do you recommend certification X? Is it worth pursuing?&amp;rdquo;, I find myself unsure how to respond.
Having gained experience with a few technical certifications (such as OCP and CKAD) as well as language certifications (like IELTS and TELC German), this article is an attempt to break it down and figure this out.</description>
            <content type="html"><![CDATA[<p>Certifications have always been a controversial topic for me.
They’re either dismissed as time-wasters or celebrated as career boosters.
When people ask me, &ldquo;Do you recommend certification X? Is it worth pursuing?&rdquo;, I find myself unsure how to respond.</p>
<p>Having gained experience with a few technical certifications (such as <a href="https://education.oracle.com/de/produktkatalog-outrackpath-trackp_ocpjse17/trackp_OCPJSE17">OCP</a>
and <a href="https://training.linuxfoundation.org/certification/certified-kubernetes-application-developer-ckad/">CKAD</a>)
as well as
language certifications (like <a href="https://ielts.org/">IELTS</a>
and <a href="https://www.telc.net/sprachpruefungen/deutsch/zertifikat-deutsch-telc-deutsch-b1/">TELC German</a>),
this article is an attempt to break it down and figure this out.</p>
<p>Let’s explore the disadvantages of certifications first.</p>
<ol>
<li>
<p><strong>Time</strong>.
Most of the valuable certifications need significant amount of time — time from your weekends, vacations
and that next season of &lsquo;Fallout.&rsquo;
Typically, when you start preparing, you need to tackle it in one focused chunk.
Take too long of a break, and you risk forgetting everything, forcing you to start from scratch all over again.</p>
</li>
<li>
<p><strong>Short life span</strong>.
Technology changes very fast and certifications can become outdated.<br>
What’s cutting-edge today can quickly become obsolete tomorrow.
As a result, all the hours, effort, and resources poured into earning a certification may lose relevance within a year or even sooner.
What is the newest Java version, by the way?</p>
</li>
<li>
<p><strong>Certification Testing Policies</strong>.
At first glance, these policies may not seem like a big deal, but they can quickly become quite frustrating.
They often include rules like prohibiting bathroom breaks during the exam,
restricting the ability to leave the room, requiring you to show a complete stranger
every corner of your space — even under your bed.
And let’s not forget the need to maintain focus for 2–3 hours exclusively on solving tasks with clock ticking,
an experience that can be both mentally and physically exhausting.</p>
</li>
</ol>
<p>Now let’s take a closer look at the benefits of certifications.</p>
<ol>
<li>
<p><strong>Learning Structure and depth.</strong>
Learning broad and complex topics, like a programming language, can be a difficult task.
Certifications provide a structured framework to help you tackle this challenge and give
you a concrete way to validate your knowledge at the end.
Most certification guides are designed to dive deep into the
subject matter, thoroughly covering essential concepts and ensuring you build a strong, comprehensive understanding
of the topic. A good example would be <a href="https://www.amazon.com/Oracle-Certified-Professional-Developer-Study/dp/1394286619">OCP Oracle Certified Professional Java SE 21 Developer Study Guide</a>.
This structured approach can help not to lose your way.</p>
</li>
<li>
<p><strong>Active learning.</strong>
Test-taking is one of the most effective tools for reinforcing what you’ve learned.
Pursuing a certification actively engages your mind and promotes true learning,
helping you avoid the &ldquo;illusion of learning&rdquo; — that false sense of mastery that often comes from simply
watching an online course or passively reading a book. By putting your knowledge to the test,
certifications push you to truly understand and apply concepts, rather than just consuming information.</p>
</li>
<li>
<p><strong>Career Advancement.</strong>
The debate over broken hiring processes could go on for days.
But we can not deny that job market is competitive. In this landscape, certifications can give your profile a significant boost.
Some employers, particularly those with highly formalized hiring procedures,
rely on certifications as a standardized benchmark to evaluate candidates.</p>
</li>
</ol>
<p>So, are certifications worth pursuing?
The problem with this question is that people often seek guarantees. They expect that by earning certification X,
they will automatically achieve Y (a job, a promotion, etc.).
But life doesn’t work like a vending machine — where you put in time and effort and are always guaranteed a reward.
In reality, no guarantees exist for anything in life, though it would be nice if they did.</p>
<p>If your primary goal is to secure a job or promotion, you might end up disappointed — certifications alone won’t deliver results 100% of the time.
However, if your aim is to deepen your knowledge, explore a specific field, or experience that &ldquo;Now I truly understand it!&rdquo; moment,
then pursuing a certification is absolutely worth it.</p>
<p>Mentioned certifications links:</p>
<ol>
<li><a href="https://education.oracle.com/de/produktkatalog-outrackpath-trackp_ocpjse17/trackp_OCPJSE17">Oracle Certified Professional: Java SE 17 Developer (OCP)</a></li>
<li><a href="https://training.linuxfoundation.org/certification/certified-kubernetes-application-developer-ckad/">Certified Kubernetes Application Developer (CKAD)</a></li>
<li><a href="https://ielts.org/">International English Language Testing System (IELTS)</a></li>
<li><a href="https://www.telc.net/sprachpruefungen/deutsch/zertifikat-deutsch-telc-deutsch-b1/">TELC German test</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Open Source Software: True Love or Business Transaction</title>
            <link>https://savchenko.tech/posts/opensource/</link>
            <pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/opensource/</guid>
            <description>“Open source” is one of the concepts that is widely used and at the same time is widely misunderstood.
I think that is misunderstanding, not injustice leads to wave of frustration every time next company make a switch from Open Source Licence to Business Source License. HashiCorp, Confluent, Elastic, Redis and others did prioritize their business with Business Source License move.
Do they being greedy? No. They just make money, as business suppose to do.</description>
            <content type="html"><![CDATA[<p>“Open source” is one of the concepts that is widely used and at the same time is widely misunderstood.</p>
<p>I think that is misunderstanding, not injustice leads to wave of frustration every time next company make a switch
from Open Source Licence to Business Source License.
HashiCorp, Confluent, Elastic, Redis and others did prioritize their business with Business Source License move.</p>
<p>Do they being greedy? No. They just make money, as business suppose to do.</p>
<p>So, if we turn focus from the business and ask ourselves, developers:
&ldquo;Do we have enough knowledge about Intellectual property?&rdquo;
I would say - &ldquo;No, I definitely not&rdquo;.
And that is not surprising, because Intellectual property Law is its own enormous thing.</p>
<p>When reading the GNU Library Public Licence I realized I do not understand half of the text, and needed
to go over some passages several times.
When talking to people on meetups or listening to the podcasts I realised that others are confused too.</p>
<p>Some of the common misconceptions were:</p>
<ul>
<li>Open source code does not have a licence</li>
<li>Source available code can be used the same way as Open source</li>
<li>Author of the code in Open Source always own it</li>
</ul>
<p>Small disclaimer:
This article is more of an attempt to highlight confusion points, not clarify everything about Open Source Licencing.</p>
<p>So, what is a licence anyway?</p>
<p>Simplified, <strong>License</strong> is the legal way a copyright owner grants permission to others to use his/her intellectual property.</p>
<p><strong>Copyright</strong> protects only the expression of that idea.
A copyright comes into force when the protected work is created.</p>
<h4 id="what-is-open-source-license">What is Open Source License?</h4>
<p>Short definition from Open Source Initiative’s website:</p>
<blockquote>
<p><strong>Open source licenses</strong> are licenses that comply with the Open Source Definition – in brief,
they allow software to be freely used, modified, and shared. To be approved by the Open Source Initiative
(also known as the OSI) a license must go through the Open Source Initiative’s license review process.</p>
</blockquote>
<p>Open source is not really a legal term.
It is not illegal to name something Open Source even if it is not, but it is illegal to violate the licence.
So, we should read licenses very carefully.</p>
<h4 id="source-available-vs-open-source">Source available vs Open source</h4>
<blockquote>
<p><strong>Business Source License (BSL)</strong> is an alternative to closed source or open core licensing models.
Under BSL, the source code is always publicly available. Non-production use of the code is always free,
and the licensor can also make an Additional Use Grant allowing limited production use.</p>
</blockquote>
<p>Thus, basically, BSL can mean anything. From only registration to paying fee per user, processor core, etc.
The main thing about BSL that it is not an Open source license because it does not meet Open Source Definition.
And it is not a concrete Licence, it is a template. So reading carefully applies here too.</p>
<p>When we talk about relicensing, Open source project does need agreements from all the contributors to do so,
unless Project owns the copyrights in contributions made to them.</p>
<p>And that has been the Greatest confusion for me - <strong>Contributors licence</strong>.
In many cases identical licenses are used for contributions and for the project&rsquo;s derivative works.
I have never seen full clear legal description on Open Source projects web pages.
It is almost impossible to find out who is copyright holder is or when copyright assignment happening,
if that is happening.
But in cases of relicencing it is clear that copyright holder was Foundation or Company behind the Open Source project.
In my opinion it is very important to understand what you&rsquo;re being asked to give away when contributing to Open Source project.</p>
<p>I am still confused with the question: Why if Open source so &ldquo;Open&rdquo;, I can not find the copyright holder easily?
People contribute to Open Source projects whose goals and values they share. And one of those values should be
transparency.
My expectations are that Open Source projects are more open. In ideal world&hellip;</p>
<p>In the real world however developers should invest
time into understanding Intellectual Property better to protect their work, to respect work of the others and
not to over-romanticise community-supported software.</p>
<ol>
<li><a href="https://opensource.org/osd">The Open Source Definition by Open Source Initiative</a>.</li>
<li><a href="https://www.amazon.com/Open-Source-Licensing-Software-Intellectual/dp/0131487876">Open Source Licensing: Software Freedom and Intellectual Property Law by Lawrence Rosen</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>The Power of Data Oriented Programming in Java</title>
            <link>https://savchenko.tech/posts/dataoriented/</link>
            <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/dataoriented/</guid>
            <description>Most of the applications we developers are working on are have to do with data. We are getting data from &amp;ldquo;outside world&amp;rdquo;, save it and pass further. And it does not matter how complex the domain is we always ask the next questions:
How do I know for sure that my data is valid? How do I avoid errors in my system and do not inject it into other system? The answer is - better data modeling.</description>
            <content type="html"><![CDATA[<p>Most of the applications we developers are working on are have to do with data.
We are getting data from &ldquo;outside world&rdquo;, save it and pass further.
And it does not matter how complex the domain is we always ask the next questions:</p>
<ul>
<li>How do I know for sure that my data is valid?</li>
<li>How do I avoid errors in my system and do not inject it into other system?</li>
</ul>
<p>The answer is - better data modeling. Clear, cohesive domain model that make it very hard to input erroneous states.</p>
<p>One of the methods to achieve that is data oriented programming.</p>
<p>The main characteristics of Data Oriented Programming are:</p>
<ol>
<li>Modeling clear and cohesive data structures</li>
<li>Using immutable data</li>
<li>Making illegal state impossible to enter the system</li>
<li>Validation at the boundary</li>
</ol>
<p>Let&rsquo;s take a look at each of these characteristics on relatively easy Java example.</p>
<p>We will build simple REST application that process orders.</p>
<h4 id="modeling-data-with-sealed-interfaces-and-records">Modeling data with sealed interfaces and records</h4>
<p>To get cohesive data model we will use sealed interface for Order and records for alternatives of the Order.
The benefit of this approach is better safety and maintainability by making illegal states unrepresentable.</p>
<p>Annotations above sealed class are necessarily to link interface and matching concrete implementation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@JsonIgnoreProperties</span>(ignoreUnknown <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@JsonTypeInfo</span>(use <span style="color:#f92672">=</span> JsonTypeInfo.<span style="color:#a6e22e">Id</span>.<span style="color:#a6e22e">NAME</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@JsonSubTypes</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@JsonSubTypes.Type</span>(value <span style="color:#f92672">=</span> ClientOrder.<span style="color:#a6e22e">class</span>, name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ClientOrder&#34;</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@JsonSubTypes.Type</span>(value <span style="color:#f92672">=</span> GuestOrder.<span style="color:#a6e22e">class</span>, name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;GuestOrder&#34;</span>)
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">Order</span> permits ClientOrder, GuestOrder {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">GuestOrder</span>(String orderDetails, String deliveryDetails) <span style="color:#66d9ef">implements</span> Order {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">record</span> <span style="color:#a6e22e">ClientOrder</span>(String orderDetails, String deliveryDetails, Long clientId) <span style="color:#66d9ef">implements</span> Order {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ClientOrder {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> clientIdStr <span style="color:#f92672">=</span> String.<span style="color:#a6e22e">valueOf</span>(clientId);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (clientIdStr.<span style="color:#a6e22e">length</span>() <span style="color:#f92672">&gt;</span> 10 <span style="color:#f92672">||</span> clientIdStr.<span style="color:#a6e22e">length</span>() <span style="color:#f92672">&lt;</span> 3) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException(<span style="color:#e6db74">&#34;clientId must be no more than 10 and no less than 3 digits long&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Using records also brings immutability benefits. Fields of a record  do not have setter methods and are implicitly final.
As shown in ClientOrder, record constructor can be a good place for validation data before injecting it into a system.</p>
<h4 id="processing-the-options-with-a-pattern-matching-switch">Processing the options with a pattern matching switch</h4>
<p>To process and map Order options we use pattern matching switch. Because Order interface is sealed, compiler will check
if all the options are covered.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> OrderEntity <span style="color:#a6e22e">mapToEntity</span>(Order order) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">switch</span> (order) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ClientOrder clientOrder <span style="color:#f92672">-&gt;</span> mapToEntity(clientOrder);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> GuestOrder guestOrder <span style="color:#f92672">-&gt;</span> mapToEntity(guestOrder);
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Order <span style="color:#a6e22e">mapToDto</span>(OrderEntity entity) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">switch</span> (entity) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> ClientOrderEntity clientOrderEntity <span style="color:#f92672">-&gt;</span> map(clientOrderEntity);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> GuestOrderEntity guestOrderEntity <span style="color:#f92672">-&gt;</span> map(guestOrderEntity);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">default</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> OrderNotFoundException();
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>This implementation is quite elegant in comparison to Visitor pattern for example.</p>
<p>Controller takes Order sealed type and the system can confidently deal with alternative cases.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> <span style="color:#a6e22e">@PostMapping</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">processOrder</span>(<span style="color:#a6e22e">@RequestBody</span> Order order) {
</span></span><span style="display:flex;"><span>        orderProcessor.<span style="color:#a6e22e">processOrder</span>(order);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> ResponseEntity.<span style="color:#a6e22e">ok</span>(<span style="color:#e6db74">&#34;Order processed successfully! &#34;</span> <span style="color:#f92672">+</span> order);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Order<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">getOrders</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> ResponseEntity.<span style="color:#a6e22e">ok</span>(orderProcessor.<span style="color:#a6e22e">getAllOrders</span>());
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>So, using data oriented approach can help with creating more cohesive data model, which can increase readability,
maintainability and testability. In my opinion it can be good fit for both simple domain and more complex one.</p>
<p>Complete <a href="https://github.com/marynasavchenko/data-oriented/tree/main/orders">implementation</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://openjdk.org/projects/amber/">Project Amber</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Confusing Consistency: CAP vs ACID</title>
            <link>https://savchenko.tech/posts/confusingconsistency/</link>
            <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/confusingconsistency/</guid>
            <description>Effective communication requires getting definitions right. Very often the same word can have different meanings and lead to confusion. Good example of that would be term Consistency. In this article we will take a look at consistency in CAP and ACID and differences between them.
Let&amp;rsquo;s start with defining CAP and ACID.
CAP theorem is formulated by computer scientist Eric Brewer in 2000, and states that a distributed data store cannot simultaneously provide more than two out of the following three guarantees:</description>
            <content type="html"><![CDATA[<p><img src="../../images/consistency3.png" alt="consistency3.png"></p>
<p>Effective communication requires getting definitions right.
Very often the same word can have different meanings and lead to confusion. Good example of that would be term Consistency.
In this article we will take a look at consistency in CAP and ACID and differences between them.</p>
<p>Let&rsquo;s start with defining CAP and ACID.</p>
<blockquote>
<p><strong>CAP theorem</strong> is formulated by computer scientist Eric Brewer in 2000, and states that a distributed
data store cannot simultaneously provide more than two out of the following three guarantees:</p>
<p>Consistency (C):
Every read receives the most recent write or an error. In a consistent system, all nodes in the system have the same data
view at any given point in time.</p>
<p>Availability (A):
Every request is guaranteed to receive a response, without the guarantee that it contains the most recent version
of the information.</p>
<p>Partition Tolerance (P):
The system continues to operate despite network partitions that may cause communication failures between nodes.</p>
</blockquote>
<blockquote>
<p><strong>ACID</strong> represents a set of properties that guarantee the reliability and correctness of transactions in database systems.</p>
<p>Atomicity (A):
Ensures that a transaction is treated as a single, indivisible unit of work.</p>
<p>Consistency (C):
Ensures that a transaction brings the database from one valid state to another.</p>
<p>Isolation (I):
Ensures that multiple transactions can execute concurrently without interfering with each other.</p>
<p>Durability (D):
Guarantees that once a transaction is committed, its changes are permanent and will survive subsequent failures,
such as system crashes or power outages.</p>
</blockquote>
<p>So, in the CAP theorem, the word consistency is used in the meaning of linearizability.
And in the context of ACID, consistency refers to an application-specific notion of the database being in a “good state.”
Let&rsquo;s dive deeper in each oh them.</p>
<p>What is linearizability?</p>
<p><strong>Linearizability</strong> (also known as atomic consistency, strong consistency, immediate consistency, or external consistency)
is a recency guarantee on reads and writes of an individual object. It is a strong consistency model.
So if you ask different replicas the same question, you will receive the same answer.</p>
<p>Let&rsquo;s take a look at nonlinearizable system example:</p>
<p><img src="../../images/consistency4.png" alt="consistency4.png"></p>
<ol>
<li>Friends Bob and Alice discuss going on vacation and book accommodation.</li>
<li>During their discussion John books the accommodation that Bob and Alice were looking at.</li>
<li>When Bob refreshes the page, he sees that it is still available because he reads from the other replica
that has not been updated yet.</li>
<li>Alice after the refresh sees that accommodation is not available because she reads from the first replica that has the most recent update.</li>
</ol>
<p>The fact that Bob&rsquo;s query returned a stale state is an example of linearizability violation.</p>
<p>Next image will show the same scenario on linearizable system:</p>
<p><img src="../../images/consistency5.png" alt="consistency5.png"></p>
<p>In linearizable system once a new value has been written, all subsequent reads see the value that was written,
until it is overwritten again. This means that the system acts as if there is only one replica.</p>
<p><strong>ACID Consistency</strong> is nothing that database can fully guarantee (except some uniqueness constraints, etc.).
It’s the application’s responsibility to define its transactions correctly so that they preserve consistency.
In most cases if you write bad data, the database can not stop you.</p>
<p>Let&rsquo;s take a look at ACID consistency compliance example:</p>
<p><img src="../../images/consistency6.png" alt="consistency6.png"></p>
<p>Each step is successfully completed before moving to the next, ensuring database consistency throughout the transaction.
If any step fails, the transaction is rolled back, maintaining the consistency of the database.</p>
<p>If the payment processing will fail and the system doesn&rsquo;t roll back the initial reservation it will lead to inconsistency
in the database.</p>
<p>So, CAP Consistency means linearizability and ACID Consistency is application’s responsibility and nothing that database
can guarantee. It’s unfortunate that the same word is used with many meanings. We took a look at only 2 examples and there are
also eventual consistency and consistent hashing.
This is why having precise and clear definitions is crucial especially when the term is overloaded.
<a href="https://martin.kleppmann.com/">Martin Kleppman</a> did amazing job in untangling many os these terms.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/-/en/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321">Designing Data-Intensive Applications by Martin Kleppmann</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Blockchains Comparison</title>
            <link>https://savchenko.tech/posts/blockchaincomparison/</link>
            <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/blockchaincomparison/</guid>
            <description>In the previous article we took a look at some basic blockchain concepts and use cases.
Now let&amp;rsquo;s explore the differences between several prominent public blockchains (Bitcoin, Ethereum and Kadena) through the lens of challenges they are facing and understand how those challenges are addressed.
So, what are main problems of blockchain?
1. Privacy Privacy is not the strongest suite of public blockchains because it is not fully matured area. What does this mean?</description>
            <content type="html"><![CDATA[<p>In the <a href="https://savchenko.tech/posts/blockchain/">previous article</a> we took a look at some basic blockchain concepts and use cases.</p>
<p>Now let&rsquo;s explore the differences between several prominent public blockchains (<a href="https://bitcoin.org/en/">Bitcoin</a>, <a href="https://ethereum.org/en/">Ethereum</a> and <a href="https://kadena.io/">Kadena</a>)
through the lens of challenges they are facing and understand how those challenges are addressed.</p>
<p>So, what are main problems of blockchain?</p>
<h4 id="1-privacy">1. Privacy</h4>
<p>Privacy is not the strongest suite of public blockchains because it is not fully matured area.
What does this mean?
Often public blockchains expose transaction details to all participants, which may not be suitable for all use cases.
For example, all Bitcoin transactions are public and traceable.</p>
<p>One way to anonymize transactions is to use zero-knowledge proof.</p>
<blockquote>
<p>A <strong>zero-knowledge</strong> proof is a cryptographic method or protocol where party A (the prover) proves to party B (the verifier)
that a statement is true without revealing any information other than that the statement is true.</p>
</blockquote>
<p>Ethereum is using it in Tornado Cash, a decentralized, non-custodial service that allows users to conduct private transactions.
Kadena is working on bringing zero-knowledge infrastructure to blockchain as well.</p>
<h4 id="2-smart-contract-security">2. Smart contract security</h4>
<blockquote>
<p><strong>A smart contract</strong> is a self-executing contract with the terms of the agreement directly written into code.</p>
</blockquote>
<p>The programming language used to write smart contracts plays a significant role in influencing their security.
To ensure higher level of security within the blockchains some languages deliberately made Turing-incomplete.</p>
<blockquote>
<p><strong>Turing completeness</strong> is a property of a programming language or system that indicates it can perform any computation
that a Turing machine can, given enough time and memory.</p>
</blockquote>
<p>Bitcoin is using Bitcoin Script language, which is Turing-incomplete and more resistant to potential vulnerabilities.
At the same time it restricts the types of complex smart contracts that can be implemented on the Bitcoin blockchain.</p>
<p>Ethereum prioritised flexibility in Solidity language. It is Turing-complete and enables more complex code.
It has rich ecosystem and large developer community. On the flip side Turing-completeness of Solidity enabled
some of the <a href="https://github.com/sigp/solidity-security-blog">security attacks</a> on Ethereum.</p>
<p>Kadena uses Pact language which is, same as Bitcoin Script, Turing-incomplete, so it does not allow recursion or
infinite loops. This reduces potential attack vectors that may occur in smart contracts.</p>
<h4 id="3-scalability">3. Scalability</h4>
<p>Many blockchain networks face scalability challenges, struggling to handle a large number of transactions quickly.
With the ever-increasing volume of transactions, the blockchain becomes heavy which means delays.</p>
<p>One of the reason for such heaviness is PoW (Proof-Of-Work) consensus mechanism that is used in Bitcoin.</p>
<p>Ethereum addressed this issue by moving from PoW to PoS (Proof-Of-Stake) that is considered to have shorter block times,
leading to faster transaction confirmations and higher transaction throughput.</p>
<p>Another way to enhance scalability used by blockchains is adding layer 2 (term to describe scaling solutions build on top of layer 1).
For example for Bitcoin it is Lightning Network - a payment protocol that enables faster and cheaper transactions
by creating off-chain payment channels.</p>
<p>Kadena&rsquo;s Chainweb (scalable PoW consensus algorithm) architecture is designed to address scalability issues in layer 1.
By connecting multiple chains, Kadena seeks to achieve higher transaction throughput without sacrificing security.</p>
<h4 id="4-energy-consumption">4. Energy Consumption</h4>
<p>While being proved secure consensus method PoW has another downside - it is very energy-intensive.
In PoW, miners hash the block header nonstop to reach the target value. As an effect, the electricity requirement reach maximum on scale.</p>
<p>So because of PoW Bitcoin consumes a lot of energy. According to the <a href="https://ccaf.io/cbnsi/cbeci">Cambridge Center for Alternative Finance (CCAF)</a>,
Bitcoin consumes around 156.33 Terawatt Hours per year which is energy consumption level of a small country.</p>
<p>Before moving to PoS Ethereum consumed 21.41 Terawatt Hours per year, after the move it is 6.93 Gigawatt Hours per year.
So PoS seems to be an energy-saving alternative to PoW. Miners in PoS have to prove the ownership of the currency.
It is assumed that people with more currencies are less likely to attack the network. Can single richest person take over the network then?</p>
<p>The design of Kadena’s Chainweb scalable PoW consensus algorithm claims to be more efficient and secure compared to
traditional PoW-only systems, making it a “greener” alternative for crypto mining.</p>
<p>Clearly blockchains have some challenges to overcome in areas of privacy, security, scalability and energy consumption.
In my opinion it is important before production usage to understand technology limitation, trade-offs and do your own research.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/-/en/Joseph-Holbrook/dp/1119557690">Architecting Enterprise Blockchain Solutions by Joseph Holbrook</a>.</li>
<li><a href="https://www.amazon.de/-/en/Rishabh-Garg/dp/1119903734">Blockchain for Real World Applications by Rishabh Garg</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Is Software Development Art?</title>
            <link>https://savchenko.tech/posts/art/</link>
            <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/art/</guid>
            <description>Sander Mak&amp;rsquo;s talk &amp;ldquo;The Art of Software development&amp;rdquo; at JFall conference and discussions with my colleagues left me puzzled somehow. Is software development more art than engineering? What is it that I am doing anyway?
Around that time I read an article about Jens Haaning, a Danish conceptual artist who was commissioned by museum to recreate two earlier works that used scores of banknotes to represent average incomes. When museum stuff received the work they discovered two empty frames with the title “Take the Money and Run”.</description>
            <content type="html"><![CDATA[<p><img src="../../images/art.png" alt="art.png"></p>
<p>Sander Mak&rsquo;s talk &ldquo;The Art of Software development&rdquo; at JFall conference and discussions with my colleagues left me puzzled somehow.
Is software development more art than engineering? What is it that I am doing anyway?</p>
<p>Around that time I read an <a href="https://www.theguardian.com/world/2023/sep/18/danish-artist-jens-haaning-empty-frames-ordered-repay">article</a>
about Jens Haaning, a Danish conceptual artist who was commissioned by museum to recreate two earlier works that used scores of banknotes to represent average incomes.
When museum stuff received the work they discovered two empty frames with the title “Take the Money and Run”.</p>
<p>Could software developer get away with such a trick? Or was it a trick at all?</p>
<p>What is it that defines art? Let&rsquo;s take a look at some of its characteristics.</p>
<p><strong>Interpretation</strong></p>
<p>One of the key attribute of art is interpretation.
Art is subjective, and its interpretation can vary among individuals.
Different viewers may derive distinct meanings from the same piece of art based on their experiences and perspectives.</p>
<p>We definitely do not want software to be subjective and being interpreted differently, we want it to be as clear and as cohesive as possible.
The reason is that software in most cases is maintained not by people who originally created it.</p>
<p><strong>Inspiration</strong></p>
<p>Often artists are looking for an inspiration to work on a piece. In contrast, software developers are looking for self-discipline and patience (to yourself and to others)
to meet deadlines, to provide support for application they built, to figure out things. And I think inspiration has zero to do with this.</p>
<p><strong>Introspection</strong></p>
<p>Another attribute of art is introspection.
Introspection can be a driver of art.
In software development collaboration is the key to successful project completion.
When self-isolation can be beneficial for creating a piece of art work, it can be deadly for software.</p>
<p><strong>Self-expression</strong></p>
<p>While self-expression in art can be a guide to share aspects of oneself with the audience, in software development it
usually becomes the point of conflict during code reviews, testing, product owner reviews and user experiences.</p>
<p><strong>Creativity</strong></p>
<p>Is creativity a part of software development? Absolutely. As well as part of all the other activities that we, human beings, do.
Creativity is fundamental aspect of our lives.
Does creativity alone make something art? I do not think so.</p>
<p>Donald Knuth wrote in the Art of Software programming:</p>
<blockquote>
<p>“The process of preparing programs for a digital computer is especially attractive,
not only because it can be economically and scientifically rewarding, but also because it can be an aesthetic experience much like composing poetry or music.”</p>
</blockquote>
<p>I don&rsquo;t think I can fully agree with this statement. For sure the process of developing software can be intellectually engaging and pleasant activity.
At the same time I wouldn&rsquo;t over romanticise it. Doing so, we underrate many challenges we are facing like effective cooperation, clarifying requirements,
validation and verification, maintenance and support, stress of responsibility and many others.</p>
<p>What is software development than? In my opinion it is an attempt to apply very rational, scientific style of thinking to
solving real world problems in constantly evolving chaos. Software development is different from art in its own unique way with its own unique challenges.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.youtube.com/watch?v=fUVfkLUmII4&amp;ab_channel=GOTOConferences">Talk &ldquo;The Art of Software Development&rdquo; by Sander Mak </a>.</li>
<li><a href="https://www.amazon.de/-/en/Modern-Software-Engineering-Better-Faster/dp/0137314914">Modern Software Engineering: Doing What Works to Build Better Software Faster by David Farley</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Blockchain Intro: Use Cases and Consensus</title>
            <link>https://savchenko.tech/posts/blockchain/</link>
            <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/blockchain/</guid>
            <description>Why do we need blockchain?
In the world where we desperately need to cooperate Blockchain answers the question of how to establish trust between unknown people who want to carry out value exchange.
It satisfies the need for a common system that keeps track of transactions, establishes public trust and maintain it forever.
Let&amp;rsquo;s take a look at examples of blockchain in different sectors first to understand use cases.</description>
            <content type="html"><![CDATA[<p><img src="../../images/blockchain_trust.png" alt="blockchain_trust.png"></p>
<p><strong>Why do we need blockchain?</strong></p>
<p>In the world where we desperately need to cooperate Blockchain
answers the question of how to establish trust between unknown people who want to carry out value exchange.</p>
<p>It satisfies the need for a common system that keeps track of transactions, establishes public trust and maintain it forever.</p>
<p>Let&rsquo;s take a look at examples of blockchain in different sectors first to understand <strong>use cases</strong>.</p>
<ol>
<li><strong>Financial sector</strong> -  <a href="https://lendoit.com/">Lendoit</a> - provides Peer-to-Peer Lending. The benefits of this blockchain solution are:</li>
</ol>
<ul>
<li>Increased efficiency in loan approvals, providing a faster time to market</li>
<li>Elimination of third parties in the lending process, resulting in both cost efficiency and a reduction in manual errors.</li>
</ul>
<ol start="2">
<li><strong>Healthcare</strong> - <a href="https://medicalchain.com/en/">Medicalchain</a> - uses blockchain technology to securely store patient health records.
Medicalchain maintains a single version of what is considered the medical truth, which is the original medical data.</li>
<li><strong>Logistics</strong> - <a href="https://trustchain.ngi.eu/">TrustChain</a> - enables customers to track their jewelry from source to dealer.
The main benefit realized from TrustChain is transparency across the entire diamond, gold, and finished jewelry supply chains.</li>
</ol>
<p><strong>So what is Blockchain?</strong></p>
<blockquote>
<p><strong>Blockchain</strong> is a globally shared and secured data structure that maintains a transactional backend database that is immutable.</p>
</blockquote>
<p>In a blockchain, transactions are combined into blocks, which then are validated and linked into a chain.
<img src="../../images/blockchain1.png" alt="blockchain1.png"></p>
<p>The blockchain ecosystem includes blocks – the data structure used to keep records of transactions,
which are distributed among all nodes in the network, and nodes – a user or computer that holds a complete copy of the record or ledger.</p>
<p><strong>Consensus</strong></p>
<p>Consensus means the method used to come to an agreement.
So, consensus in a blockchain is how the blockchain nodes “come to agreement” over the blockchain transactions that will be written to the blockchain ledger.</p>
<p><strong>Proof of work</strong> is the most widely used consensus method.
It was the original protocol and has proven its resilience against internal and external attacks.
<img src="../../images/blockchain2.png" alt="blockchain2.png"></p>
<p>A high-level overview of the PoW consensus in Blockchain is that a block including relevant parts of the transaction
is hashed, and a random nonce is added to it so that the resulting hash is equals or below a certain value,
which is called the difficulty level.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#e6db74">&#34;20 October 1 12:30 John refunded Alice </span>$100<span style="color:#e6db74">&#34;</span> -&gt; bc07effbdbd4a902062cdd76e0e5450a4f681796fd4f9f2e4295d90e6008236f
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;20 October 1 12:30 John refunded Alice </span>$100<span style="color:#e6db74">???&#34;</span> -&gt; 0000……
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;20 October 1 12:30 John refunded Alice </span>$10021609<span style="color:#e6db74">&#34;</span>  -&gt; 00009aaee3d8187b5f551d1f04ae32c5c7f81742e88df81adbae4e3d5cdfcba6
</span></span></code></pre></div><p>This is an example of Proof of work algorithm finding a value that needs to be added to receive a hash that starts with &ldquo;0000&rdquo;.</p>
<p><strong>Why mining is required?</strong></p>
<p>Because of the usage proof-of-work algorithm. The “work” is “proven” by running computations to solve a puzzle —
generating a hash that matches a specific pattern.  In example above this pattern would be starting with &ldquo;0000&rdquo;.
Not all Blockchains use proof-of-work consensus and because of this do not require miners.</p>
<p>In this article we took a look at some Blockchain use cases, its definition and its backbone - consensus.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/-/en/Joseph-Holbrook/dp/1119557690">Architecting Enterprise Blockchain Solutions by Joseph Holbrook</a>.</li>
<li><a href="https://www.amazon.de/-/en/Rishabh-Garg/dp/1119903734">Blockchain for Real World Applications by Rishabh Garg</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Reduction. Algorithm Series</title>
            <link>https://savchenko.tech/posts/reduction/</link>
            <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/reduction/</guid>
            <description>Reduction is a basic technique in algorithm design.
A problem A reduces to problem B if we can use an algorithm that solves B to develop an algorithm that solves A.
This concept should be pretty familiar in software development. For example, when you use method evaluate() of Apache Commons library to solve a problem, your problem is reduced to the one solved by library method.
Simple example of reduction would be finding a median in a collection.</description>
            <content type="html"><![CDATA[<p>Reduction is a basic technique in algorithm design.</p>
<blockquote>
<p>A problem <strong>A</strong> <strong>reduces</strong> to problem <strong>B</strong> if we can use an algorithm that solves <strong>B</strong> to develop an algorithm that solves <strong>A</strong>.</p>
</blockquote>
<p>This concept should be pretty familiar in software development. For example, when you use method evaluate() of Apache Commons library to solve a problem,
your problem is reduced to the one solved by library method.</p>
<p>Simple example of reduction would be finding a median in a collection. This operation is a common computation in
statistics and in various other data-processing applications.</p>
<p>Finding a median can be reduced to Sorting.</p>
<p>Let&rsquo;s start with Unit tests that will check two main cases:</p>
<ul>
<li>if sorted collection has an odd number of values, the median is the middle value</li>
<li>if sorted collection has an even number of values, the median is the average of the two middle values.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">valueInTheMiddleWhenNumOfObservationsIsOdd</span>() {
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Double<span style="color:#f92672">&gt;</span> dataset <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(12.<span style="color:#a6e22e">5</span>, 18.<span style="color:#a6e22e">3</span>, 11.<span style="color:#a6e22e">2</span>, 19.<span style="color:#a6e22e">0</span>, 22.<span style="color:#a6e22e">1</span>, 14.<span style="color:#a6e22e">3</span>, 16.<span style="color:#a6e22e">2</span>, 12.<span style="color:#a6e22e">5</span>, 17.<span style="color:#a6e22e">8</span>, 16.<span style="color:#a6e22e">5</span>, 12.<span style="color:#a6e22e">5</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Double median <span style="color:#f92672">=</span> Median.<span style="color:#a6e22e">getMedian</span>(dataset);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(16.<span style="color:#a6e22e">2</span>, median);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">averageOfMiddleWhenNumOfObservationsIsEven</span>() {
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Double<span style="color:#f92672">&gt;</span> dataset <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(12.<span style="color:#a6e22e">5</span>, 18.<span style="color:#a6e22e">3</span>, 11.<span style="color:#a6e22e">2</span>, 19.<span style="color:#a6e22e">0</span>, 14.<span style="color:#a6e22e">3</span>, 16.<span style="color:#a6e22e">2</span>, 12.<span style="color:#a6e22e">5</span>, 17.<span style="color:#a6e22e">8</span>, 16.<span style="color:#a6e22e">5</span>, 12.<span style="color:#a6e22e">5</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Double median <span style="color:#f92672">=</span> Median.<span style="color:#a6e22e">getMedian</span>(dataset);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(15.<span style="color:#a6e22e">25</span>, median);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>After test cases are defined, writing implementation (can be found on <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/Median.java">GitHub</a>) is pretty easy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Double <span style="color:#a6e22e">getMedian</span>(List<span style="color:#f92672">&lt;</span>Double<span style="color:#f92672">&gt;</span> input) {
</span></span><span style="display:flex;"><span>        Collections.<span style="color:#a6e22e">sort</span>(input);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> size <span style="color:#f92672">=</span> input.<span style="color:#a6e22e">size</span>();
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (size <span style="color:#f92672">%</span> 2 <span style="color:#f92672">==</span> 0) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (input.<span style="color:#a6e22e">get</span>(size <span style="color:#f92672">/</span> 2) <span style="color:#f92672">+</span> input.<span style="color:#a6e22e">get</span>(size <span style="color:#f92672">/</span> 2 <span style="color:#f92672">-</span> 1)) <span style="color:#f92672">/</span> 2;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> input.<span style="color:#a6e22e">get</span>(size <span style="color:#f92672">/</span> 2);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>To solve &ldquo;Finding the median&rdquo; we used <strong>Sorting reduction</strong>. Efficient sorting algorithm is useful for efficiently solving many problems.
Among them:</p>
<ul>
<li>Distinct values - determine the number of distinct values in a set of numbers.</li>
<li>Scheduling to minimize average completion time - how to schedule set of jobs on a single processor so as to minimize their average
completion time?</li>
</ul>
<p>A large number of important problems can be solved applying Shortest-paths and Maxflow reductions.
Let&rsquo;s mention them here.</p>
<p><strong>Shortest-paths reductions</strong></p>
<ul>
<li>Single-source shortest paths in undirected graphs - is there a path from source to a given target vertex?</li>
<li>Arbitrage - find an arbitrage opportunity in a given table of currency-conversion rates.</li>
</ul>
<p><strong>Maxflow reductions</strong></p>
<ul>
<li>Job placement. A college’s job-placement office arranges interviews for a set of students with a set of companies.
What is the maximum number of jobs that can be filled?</li>
<li>Product distribution. A company that manufactures a single product has factories, where the product is produced;
distribution centers, where the product is stored temporarily; and retail outlets, where the product is sold.
Is it possible to get the product from the warehouses to the retail outlets such that supply meets demand everywhere?</li>
</ul>
<p>Reduction plays important role in studying relationships between diverse problems. Many of the problems seem to be unrelated
directly, but at the same time can be reduced to sorting, shortest-paths, maxflow, etc.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Null Reference Is Not the Mistake that Needs To Be Fixed</title>
            <link>https://savchenko.tech/posts/mistakes/</link>
            <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/mistakes/</guid>
            <description>Looking through Kotlin documentation made me think about mistakes.
To be more precise, mentioning development of Null reference by Tony Hoare and how that was a mistake. Later I found the same reference in an article about error handling. When I googled it, there were many more places that talked about so-called &amp;ldquo;billion-dollar mistake&amp;rdquo;: articles, pictures of the mountains with a quote (as if it is supposed to be an inspiration), even a conference talk.</description>
            <content type="html"><![CDATA[<p><img src="../../images/mistakes.png" alt="mistakes.png"></p>
<p>Looking through Kotlin documentation made me think about mistakes.</p>
<p>To be more precise,
mentioning development of Null reference by Tony Hoare and how that was a mistake.
Later I found the same reference in an article about error handling. When I googled it, there were many more places that talked about so-called
&ldquo;billion-dollar mistake&rdquo;: articles, pictures of the mountains with a quote (as if it is supposed to be an inspiration),
even a conference talk.
And I thought that is a lot of criticism for a &ldquo;mistake&rdquo; that was invented in 1965.</p>
<p>What is a mistake anyway?</p>
<blockquote>
<p>&ldquo;<strong>Mistake</strong> is an action or an opinion that is not correct, or that produces a result that you did not want.&rdquo;</p>
<p>Oxford Advanced Learners Dictionary</p>
</blockquote>
<p>If we take the second part of this definition it looks like Software development reality to me.
We are getting the results we do not want all the time. What do we do next?
We admit it, understand the reason, adjust and move forward.</p>
<p>Tony Hoare acknowledged this &ldquo;mistake&rdquo;  at a software conference in 2009.
So why criticism keep rolling till this day?</p>
<p><strong>Charles Antony Richard Hoare</strong> is one of the most productive and prolific computer scientists.
He has done incredible work in areas including <a href="https://en.wikipedia.org/wiki/Quicksort">Quicksort,</a>
<a href="https://en.wikipedia.org/wiki/Quickselect">Quickselect</a>, <a href="https://en.wikipedia.org/wiki/Hoare_logic">Hoare logic</a> and many others.
In 1980, he received the ACM (Association for Computing Machinery) <strong>Turing Award</strong> - the most prestigious award given in Computer Science.</p>
<p>And still his name is being referenced for his &ldquo;mistake&rdquo;. Which might be not really a mistake.
Was there a better solution in the context of 1965? I am not sure if there was.</p>
<p>Blaming others when things go wrong - this is the real mistake we need to fix!
I think we can be much more productive when promoting compassion, trust and kindness.
Should mistakes be acknowledged? For sure! Should they be drugged forever? Absolutely not!</p>
<p>Additional sources:</p>
<p><a href="https://www.amazon.com/Computing-Science-Prentice-hall-International-Computer/dp/0132840278">Essays in Computing Science by C. A. R. Hoare</a></p>
]]></content>
        </item>
        
        <item>
            <title>Why a Square Is Not a Rectangle: Liskov Substitution Principle</title>
            <link>https://savchenko.tech/posts/liskov/</link>
            <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/liskov/</guid>
            <description>Liskov substitution principle (LSP) is one of the five SOLID principles. It is based on the concept of &amp;ldquo;substitutability&amp;rdquo;. Principle allows using code to be written in terms of the supertype specification, yet work correctly when using objects of the subtype.
&amp;ldquo;What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</description>
            <content type="html"><![CDATA[<p>Liskov substitution principle (LSP) is one of the five <a href="https://savchenko.tech/posts/solid/">SOLID principles</a>.
It is based on the concept of &ldquo;substitutability&rdquo;. Principle allows using code to be written in terms of the supertype specification,
yet work correctly when using objects of the subtype.</p>
<blockquote>
<p>&ldquo;What is wanted here is something like the following substitution property:
If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,
the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.1&rdquo;</p>
<p>Barbara Liskov, 1988</p>
</blockquote>
<p>In other words software systems should be built from substitutable (interchangeable) parts.
If superclass does something, subclass should do it too (it should be substitutable for the superclass).</p>
<p><strong>What Is The Problem With Rectangle Being Derived From Square?</strong></p>
<p>Let&rsquo;s create Rectangle and Square classes with calculateArea() method on parent Rectangle class.
<img src="../../images/lsp.png" alt="lsp.png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Rectangle</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">double</span> height;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">double</span> weight;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Rectangle</span>(<span style="color:#66d9ef">double</span> height, <span style="color:#66d9ef">double</span> weight) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> height;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">weight</span> <span style="color:#f92672">=</span> weight;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">double</span> <span style="color:#a6e22e">calculateArea</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> height <span style="color:#f92672">*</span> weight;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Square</span> <span style="color:#66d9ef">extends</span> Rectangle {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Square</span>(<span style="color:#66d9ef">double</span> side) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span>(side, side);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tests for calculating area for both Rectangle and Square are green. No obvious problem so far.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldCalculateRectangleArea</span>() {
</span></span><span style="display:flex;"><span>        Rectangle rectangle <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Rectangle(2, 4);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">double</span> area <span style="color:#f92672">=</span> rectangle.<span style="color:#a6e22e">calculateArea</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(8, area);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldCalculateSquareArea</span>() {
</span></span><span style="display:flex;"><span>        Rectangle rectangle <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Square(4);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">double</span> area <span style="color:#f92672">=</span> rectangle.<span style="color:#a6e22e">calculateArea</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(16, area);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>The problem appears when there is a need to mutate separately height and weight.</p>
<p>This will make setters for height and weight available on Square also and can end up in incorrectly modified shape.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldSetWeightOfRectangle</span>() {
</span></span><span style="display:flex;"><span>            Rectangle rectangle <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Rectangle(2, 4);
</span></span><span style="display:flex;"><span>            rectangle.<span style="color:#a6e22e">setWeight</span>(6);
</span></span><span style="display:flex;"><span>            assertEquals(2, rectangle.<span style="color:#a6e22e">getHeight</span>());
</span></span><span style="display:flex;"><span>            assertEquals(6, rectangle.<span style="color:#a6e22e">getWeight</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>             
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldSetSideOfSquare</span>() {
</span></span><span style="display:flex;"><span>            Rectangle square <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Square(4);
</span></span><span style="display:flex;"><span>            square.<span style="color:#a6e22e">setWeight</span>(6); 
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// different values, should not be happening</span>
</span></span><span style="display:flex;"><span>            assertEquals(6, square.<span style="color:#a6e22e">getWeight</span>());
</span></span><span style="display:flex;"><span>            assertEquals(4, square.<span style="color:#a6e22e">getHeight</span>());
</span></span><span style="display:flex;"><span>            }
</span></span></code></pre></div><p>So Square subtype is not substitute Rectangle, because Square has fewer properties yet inherit access methods of super
class Rectangle.</p>
<p>Of course, the problem can be solved with additional check on caller&rsquo;s side. But this is not how we want to use polymorphism.</p>
<p>Violation of Liskov substitution principle can lead to pollution of the system with extra logic which will make code more fragile and
less readable.</p>
<p>Implementation with tests can be found on <a href="https://github.com/marynasavchenko/patternskata/tree/main/src/main/java/liskov">GitHub</a>.</p>
<p>Sources:</p>
<ol>
<li>
<p><a href="https://www.amazon.com/Program-Development-Java-Specification-Object-Oriented/dp/0201657686">Program Development in Java: Abstraction, Specification, and Object-Oriented Design by Barbara Liskov and John Guttag</a></p>
</li>
<li>
<p><a href="https://www.amazon.de/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164">Clean Architecture: A Craftsman&rsquo;s Guide to Software Structure and Design: A Craftsman&rsquo;s Guide to Software Structure and Design by Robert C. Martin</a></p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Clean Code Notes</title>
            <link>https://savchenko.tech/posts/cleancode/</link>
            <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/cleancode/</guid>
            <description>It is hard to find software engineer these days that has never heard of Clean code. At the same time in many organizations code that runs on production brings bugs and pain every day.
So, what is Clean code and why it is important?
Clean code is set of principles for writing clear, understandable, and maintainable code. It is not strict rules and applying each principle needs to make sense in concrete situation.</description>
            <content type="html"><![CDATA[<p><img src="../../images/cleanCode.png" alt="cleanCode.png"></p>
<p>It is hard to find software engineer these days that has never heard of Clean code. At the same time in many organizations code that runs on production
brings bugs and pain every day.</p>
<p>So, what is Clean code and why it is important?</p>
<p><strong>Clean code</strong> is set of principles for writing clear, understandable, and maintainable code.
It is not strict rules and applying each principle needs to make sense in concrete situation.</p>
<p>Two main reasons to use Clean Code principles are:</p>
<ul>
<li>
<p>decreasing the cost of maintenance and support of software - easier to make changes, add new functionalities and find defects</p>
</li>
<li>
<p>making life of software engineers simpler.</p>
</li>
</ul>
<p>There is a list of principles that I use frequently.</p>
<p><strong>1. Meaningful names of variables</strong></p>
<ul>
<li>one word per concept</li>
<li>classes and objects should have noun or noun phrase names</li>
<li>readable and searchable</li>
</ul>
<p><strong>2. Small methods</strong></p>
<ul>
<li>one level of abstraction per method</li>
<li>method should do one thing</li>
</ul>
<p><strong>3. Avoid flag argument</strong></p>
<ul>
<li>
<p>create separate methods, should be a part of API</p>
</li>
<li>
<p><a href="https://martinfowler.com/bliki/FlagArgument.html#:~:text=A%20flag%20argument%20is%20a,operation%20depending%20on%20its%20value">more about FlagArgument on Martin Fowler&rsquo;s blog</a></p>
</li>
</ul>
<p><strong>4. Command query separation</strong></p>
<ul>
<li>each method should be only command or query</li>
<li>command performs an action, do not return anything and has a side effect</li>
<li>query returns a value, does not perform an action and does not have a side effect</li>
</ul>
<p><strong>5. DRY – do not repeat yourself</strong></p>
<ul>
<li>create helper method</li>
</ul>
<p><strong>6. Null, do not pass, do not return</strong></p>
<ul>
<li>use Null object pattern (needs to be passed through the system without consequences)</li>
</ul>
<p><strong>7. Clean tests</strong></p>
<ul>
<li>one assertion per test</li>
<li>DAMP (descriptive and meaningful phases) over DRY</li>
</ul>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin</a>.</li>
<li><a href="https://www.amazon.de/-/en/Robert-C-Martin/dp/0137081073">The Clean Coder: A Code of Conduct for Professional Programmers by Robert C. Martin</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>AWS Cloud. Definition and Characteristics</title>
            <link>https://savchenko.tech/posts/aws/</link>
            <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/aws/</guid>
            <description>The need to accelerate building and deploying software and high cost of local data centers are two main reasons for Cloud popularity.
What is Cloud?
Simplified, Cloud can be defined as data center that is not yours.
The National Institute of Standards and Technology (NIST) provides more descriptive definition:
Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (networks, virtual machines, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.</description>
            <content type="html"><![CDATA[<p><img src="../../images/cloud4.png" alt="cloud4.png"></p>
<p>The need to accelerate building and deploying software and high cost of local data centers are two main reasons for
Cloud popularity.</p>
<p>What is Cloud?</p>
<p>Simplified, <strong>Cloud</strong> can be defined as data center that is not yours.</p>
<p>The National Institute of Standards and Technology (NIST) provides more descriptive definition:</p>
<blockquote>
<p><strong>Cloud computing</strong> is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool
of configurable computing resources (networks, virtual machines, storage, applications, and services)
that can be rapidly provisioned and released with minimal management effort or service provider interaction.</p>
</blockquote>
<p>Clouds are divided into three types by location and ownership:</p>
<ul>
<li>
<p><strong>Public</strong> — managed by an organization and open to use by the public.</p>
</li>
<li>
<p><strong>Private</strong> — virtualizes and distributes the IT infrastructure for a single organization.</p>
</li>
<li>
<p><strong>Hybrid</strong> — a mixture of a public and a private cloud.</p>
</li>
</ul>
<p>Cloud computing services also have several classifications:</p>
<ul>
<li>
<p><strong>Infrastructure as a service (IaaS)</strong> — fundamental resources like computing, storage, and networking capabilities,
using virtual machines (Amazon EC2).</p>
</li>
<li>
<p><strong>Platform as a service (PaaS)</strong> — platforms to deploy custom applications to the cloud (AWS Elastic Beanstalk).</p>
</li>
<li>
<p><strong>Software as a service (SaaS)</strong> — combines infrastructure and software running in the cloud (Amazon WorkSpaces).</p>
</li>
</ul>
<p><img src="../../images/cloud1.png" alt="cloud1.png"></p>
<p><strong>AWS</strong> is the most popular public cloud that contains IaaS, PaaS, and SaaS.</p>
<p><strong>Characteristics</strong></p>
<p>According to NIST, five key definitions of the public cloud have transformed into a definitive standard methodology of operating in the public cloud:</p>
<ul>
<li>
<p><strong>On-demand self-service</strong> - almost instant availability after requesting a cloud service.</p>
</li>
<li>
<p><strong>Broad network access</strong> - accessibility from practically anywhere across the globe using the Internet.</p>
</li>
<li>
<p><strong>Resource Pooling</strong> - polling together infrastructure resources in many data centers across the different
regions of the world and dynamically assigning them on demand.</p>
</li>
<li>
<p><strong>Rapid Elasticity</strong> - scaling for both compute and storage.</p>
</li>
<li>
<p><strong>Measured Service</strong> - billing for only what you use.</p>
</li>
</ul>
<p><strong>Benefits</strong></p>
<p>Unlimited access to servers and storage and many management services should make it easier to operate in the cloud.</p>
<ul>
<li>
<p><strong>Servers</strong> - reducing costs on hosting physical servers</p>
</li>
<li>
<p><strong>Storage</strong> - unlimited amount of storage with the wide range of options</p>
<ul>
<li>File systems - Windows and Linux</li>
<li>S3 - Simple Storage Service for static assets and archived storage</li>
<li>RDS - relational database service solutions</li>
<li>DynamoDB — a horizontally scalable transactional database service</li>
<li>etc.</li>
</ul>
</li>
<li>
<p><strong>Managed services</strong> - a variety of managed services</p>
<ul>
<li>Monitoring - CloudWatch monitoring providing metrics for every AWS service</li>
<li>Data backup - Veritas and Commvault have AWS solutions</li>
<li>Scale - EC2 Auto Scaling</li>
<li>etc.</li>
</ul>
</li>
</ul>
<p><strong>Limitations or “everything fails all the time”</strong></p>
<p>Cloud consumer should fully understand SLA (Service Level Agreement) given by cloud provider.
There is no way AWS can provide zero outage. In case of failure credit is promised to be given.
To receive credit if you were down, you will have to prove that you were actually down by providing network traces and appropriate
documentation proving that issue was caused by AWS cloud.</p>
<p>Another important point is that redundancy must be built into application design. Application should continue to operate
even if compute and storage failures occur.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.pearson.de/learning-amazon-web-services-aws-a-hands-on-guide-to-the-fundamentals-of-aws-cloud-9780135301081">Learning Amazon Web Services (AWS) by Mark Wilkins</a>.</li>
<li><a href="https://aws.amazon.com/de/legal/service-level-agreements/">AWS SLA</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Kotlin. Elegance that We Missed in Java</title>
            <link>https://savchenko.tech/posts/springandkotlin/</link>
            <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/springandkotlin/</guid>
            <description>For me, as a software engineer with experience in Java, Kotlin was definitely the language of interest. It is also JVM language, but promised to be improved, concise, readable and beautiful.
So, what are the advantages of Kotlin?
Null safety - null references are detected at compile time.
Fluency - fluent code is readable and easier (and cheaper) to maintain.
Coroutines - a great way to implement non-blocking calls and gracefully handle exceptions.</description>
            <content type="html"><![CDATA[<p><img src="../../images/kotlin2.png" alt="kotlin2.png"></p>
<p>For me, as a software engineer with experience in Java, Kotlin was definitely the language of interest.
It is also JVM language, but promised to be improved, concise, readable and beautiful.</p>
<p>So, what are the advantages of Kotlin?</p>
<ol>
<li>
<p>Null safety - null references are detected at compile time.</p>
</li>
<li>
<p>Fluency - fluent code is readable and easier (and cheaper) to maintain.</p>
</li>
<li>
<p>Coroutines - a great way to implement non-blocking calls and gracefully handle exceptions.</p>
</li>
<li>
<p>Multiplatform - Kotlin can be used to write native macOS, iOS, and Windows applications; JavaScript and Android applications.</p>
</li>
<li>
<p>Interoperability - we can reuse existing Java code by intermixing Java and Kotlin.</p>
</li>
</ol>
<p>In this article I will take a short look on Kotlin world on example of simple Spring Boot RESTfull application.
Using Spring Boot with Kotlin makes an application even more elegant. Combination of those two gives us &ldquo;double expressiveness&rdquo;.</p>
<p>This simple CRUD KotlinTutor application will implement next API:</p>
<p><strong>POST /kotlinquestions/</strong> - Add new Kotlin question.</p>
<p><strong>GET /kotlinquestions/</strong> - Retrieves all Kotlin questions.</p>
<p>To generate skeleton of Kotlin Spring Boot application <a href="https://start.spring.io/">Spring initializer</a> can be used.
After generation, we got an entry point and can run an application.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@SpringBootApplication</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KotlinTutorApplication</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">main</span>(args: Array&lt;String&gt;) {
</span></span><span style="display:flex;"><span>    runApplication&lt;KotlinTutorApplication&gt;(*args)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Kotlin code a bit simpler than Java. No semicolon.
The main() function in the Kotlin version is a top-level function, instead of being a member of the class.</p>
<p><strong>Testing</strong></p>
<p>For testing purposes I will be using <a href="https://kotest.io/">Kotest</a> and <a href="https://mockk.io/">Mockk</a>.
Kotlin code can be tested also with jUnit. Despite my great love to jUnit I wanted to try new testing tools and follow Kotlin natural style.</p>
<p>After adding necessary dependencies, we can start with the first test.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-starter-test<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;exclusions&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;exclusion&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>junit<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>junit<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/exclusion&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;exclusion&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>org.mockito<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>mockito-core<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/exclusion&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/exclusions&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;groupId&gt;</span>io.kotest.extensions<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>kotest-extensions-spring<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;version&gt;</span>1.1.0<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;groupId&gt;</span>io.kotest<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>kotest-runner-junit5-jvm<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;version&gt;</span>5.0.0<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;groupId&gt;</span>com.ninja-squad<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>springmockk<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;version&gt;</span>3.0.1<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>Kotest has 10 different styles of test <a href="https://kotest.io/docs/framework/testing-styles.html">layout</a>. I will go for original Kotlin
ShouldSpec because I am used to add &ldquo;should&rdquo; to test names.
To activate Spring extension we need to override extensions() function. it is analog to jUnit&rsquo;s @ExtendWith.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@SpringBootTest</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KotlinTutorApplicationTest</span> : FreeSpec() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">extensions</span>() = listOf(SpringExtension)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Should load context&#34;</span> {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Controller</strong></p>
<p>Next, we will move to creating controller.
We will start with WebMvcTest to check that endpoints work correctly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@WebMvcTest</span>(QuestionController<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">QuestionControllerTest</span>(<span style="color:#66d9ef">var</span> mockMvc: MockMvc) : ShouldSpec() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">extensions</span>() = listOf(SpringExtension)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@MockkBean</span>(relaxed = <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">lateinit</span> <span style="color:#66d9ef">var</span> questionsService: KotlinQuestionService
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span> {
</span></span><span style="display:flex;"><span>        should(<span style="color:#e6db74">&#34;return all questions&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> question1 = kotlinQuestion()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> question2 = KotlinQuestion(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;question2&#34;</span>, <span style="color:#e6db74">&#34;answer2&#34;</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>            every { questionsService.getAllQuestions() } returns listOf(question1, question2)
</span></span><span style="display:flex;"><span>            mockMvc.perform(<span style="color:#a6e22e">MockMvcRequestBuilders</span>.<span style="color:#66d9ef">get</span>(<span style="color:#e6db74">&#34;/kotlinquestions&#34;</span>))
</span></span><span style="display:flex;"><span>                .andExpect(status().isOk)
</span></span><span style="display:flex;"><span>                .andExpect(content().contentType(<span style="color:#a6e22e">MediaType</span>.APPLICATION_JSON))
</span></span><span style="display:flex;"><span>                .andExpect(jsonPath(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\$</span><span style="color:#e6db74">.[0].question&#34;</span>).<span style="color:#66d9ef">value</span>(question1.question))
</span></span><span style="display:flex;"><span>                .andExpect(jsonPath(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\$</span><span style="color:#e6db74">.[0].answer&#34;</span>).<span style="color:#66d9ef">value</span>(question1.answer))
</span></span><span style="display:flex;"><span>                .andExpect(jsonPath(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\$</span><span style="color:#e6db74">.[0].questionType&#34;</span>).<span style="color:#66d9ef">value</span>(question1.questionType))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        should(<span style="color:#e6db74">&#34;post question&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> question = kotlinQuestion()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> objectMapper = ObjectMapper()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> json = objectMapper.writeValueAsString(question)
</span></span><span style="display:flex;"><span>            mockMvc.perform(
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">MockMvcRequestBuilders</span>.post(<span style="color:#e6db74">&#34;/kotlinquestions&#34;</span>)
</span></span><span style="display:flex;"><span>                    .contentType(<span style="color:#a6e22e">MediaType</span>.APPLICATION_JSON)
</span></span><span style="display:flex;"><span>                    .content(json)
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>                .andExpect(status().isOk)
</span></span><span style="display:flex;"><span>            verify { questionsService.addQuestion(question)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">kotlinQuestion</span>() = KotlinQuestion(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;question1&#34;</span>, <span style="color:#e6db74">&#34;answer1&#34;</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that code looks more concise than Java:</p>
<ul>
<li>Property KotlinQuestionService of a class QuestionController can be listed in its declaration.</li>
<li>getQuestions() function body can an expression. Its return type is inferred.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequestMapping</span>(<span style="color:#e6db74">&#34;/kotlinquestions&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">QuestionController</span>(<span style="color:#66d9ef">val</span> service: KotlinQuestionService) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">getQuestions</span>() = <span style="color:#a6e22e">ResponseEntity</span>.ok(service.getAllQuestions())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@PostMapping</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">addQuestion</span>(<span style="color:#a6e22e">@RequestBody</span> kotlinQuestion: KotlinQuestion): ResponseEntity&lt;String&gt; {
</span></span><span style="display:flex;"><span>        service.addQuestion(kotlinQuestion)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ResponseEntity</span>.ok(<span style="color:#e6db74">&#34;Question is created&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Entity</strong></p>
<p>Kotlin generates getters automatically, so we do need to write them.
And, since we marked KotlinQuestion as a data class, we get methods equals(), hashCode(), and toString() also for free.
As a result we got entity class without any noise.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KotlinQuestion</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Id</span> <span style="color:#a6e22e">@GeneratedValue</span> <span style="color:#66d9ef">val</span> id: Long,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">val</span> question: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">val</span> answer: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">val</span> questionType: Int
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p><strong>Service layer</strong></p>
<p>Service layer might not be necessary for such simple application, but we will create 2 services to see how Service is created
with Kotlin and try out more tests with Mockk.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KotlinQuestionServiceTest</span> : ShouldSpec() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@MockK</span>(relaxed = <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">lateinit</span> <span style="color:#66d9ef">var</span> questionRepository: QuestionRepository
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@MockK</span>(relaxed = <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">lateinit</span> <span style="color:#66d9ef">var</span> verificationService: VerificationService
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@InjectMockKs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">lateinit</span> <span style="color:#66d9ef">var</span> kotlinQuestionService: KotlinQuestionService
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">beforeTest</span>(testCase: TestCase) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">MockKAnnotations</span>.<span style="color:#66d9ef">init</span>(<span style="color:#66d9ef">this</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">afterTest</span>(testCase: TestCase, result: TestResult) {
</span></span><span style="display:flex;"><span>        clearAllMocks()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span> {
</span></span><span style="display:flex;"><span>        should(<span style="color:#e6db74">&#34;save question when verified&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> kotlinQuestion = createQuestion()
</span></span><span style="display:flex;"><span>            every { verificationService.verifyQuestion(kotlinQuestion) } returns <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            every { questionRepository.save(kotlinQuestion) } returns kotlinQuestion
</span></span><span style="display:flex;"><span>            kotlinQuestionService.addQuestion(kotlinQuestion)
</span></span><span style="display:flex;"><span>            verify { questionRepository.save(kotlinQuestion) }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        should(<span style="color:#e6db74">&#34;throw an exception when not verified&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> kotlinQuestion = createQuestion()
</span></span><span style="display:flex;"><span>            every { verificationService.verifyQuestion(kotlinQuestion) } returns <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>            verify(exactly = <span style="color:#ae81ff">0</span>) { questionRepository.save(kotlinQuestion) }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">createQuestion</span>(): KotlinQuestion {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> KotlinQuestion(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Question1&#34;</span>, <span style="color:#e6db74">&#34;Answer1&#34;</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KotlinQuestionService</span>(<span style="color:#66d9ef">val</span> questionRepository: QuestionRepository, <span style="color:#66d9ef">val</span> verificationService: VerificationService) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">getAllQuestions</span>(): Iterable&lt;KotlinQuestion&gt; = questionRepository.findAll()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">addQuestion</span>(question: KotlinQuestion) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">val</span> verified = verificationService.verifyQuestion(question)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (verified) {
</span></span><span style="display:flex;"><span>            questionRepository.save(question)
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> InvalidPropertiesFormatException(<span style="color:#e6db74">&#34;Question is not valid&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">VerificationServiceTest</span> : ShouldSpec() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span> {
</span></span><span style="display:flex;"><span>        should(<span style="color:#e6db74">&#34;return true when type in a range 1 to 5&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> verResult = VerificationService().verifyQuestion(createQuestion(<span style="color:#ae81ff">4</span>))
</span></span><span style="display:flex;"><span>            verResult shouldBe <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        should(<span style="color:#e6db74">&#34;return false when 0&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">val</span> verResult = VerificationService().verifyQuestion(createQuestion(<span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>            verResult shouldBe <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">createQuestion</span>(type: Int): KotlinQuestion {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> KotlinQuestion(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Question1&#34;</span>, <span style="color:#e6db74">&#34;Answer1&#34;</span>, type)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>When statement makes conditional code more elegant. Especially for processing values of different types.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">VerificationService</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">verifyQuestion</span>(kotlinQuestion: KotlinQuestion) =
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">when</span> (kotlinQuestion.questionType) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">in</span> <span style="color:#ae81ff">1.</span>.<span style="color:#ae81ff">5</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">10</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Spring and Kotlin fit very well together. Spring developers support Kotlin as a first class citizen.
Hence, we can create the same application with less code.</p>
<p>Complete <a href="https://github.com/marynasavchenko/kotlintutor/tree/main/kotlintutor/src/main/kotlin/tech/savchenko/kotlintutor">implementation</a>
with <a href="https://github.com/marynasavchenko/kotlintutor/tree/main/kotlintutor/src/test/kotlin/tech/savchenko/kotlintutor">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://pragprog.com/titles/vskotlin/programming-kotlin/">Programming Kotlin by Venkat Subramaniam</a>.</li>
<li><a href="https://kotlinlang.org/docs/home.html">Kotlin Docs</a>.</li>
<li><a href="https://kotest.io/">Kotest Docs</a></li>
<li><a href="https://mockk.io/">Mockk Docs</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Topological Sort. Algorithms Series</title>
            <link>https://savchenko.tech/posts/topsort/</link>
            <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/topsort/</guid>
            <description>Topological sort can be applied in scheduling problems.
Those types of problems can be solved when:
tasks and precedence constraints are defined; cycles are detected and removed. Implementation of cycle detection can be found here.
Test should check that reverse post order is correct.
@Test void shouldReturnPostOrder() { DirectedGraph directedGraph = new DirectedGraph(4); directedGraph.addEdge(1, 0); directedGraph.addEdge(0, 3); directedGraph.addEdge(1, 2); TopologicalSort topologicalSort = new TopologicalSort(directedGraph); LinkedList&amp;lt;Integer&amp;gt; expected = new LinkedList&amp;lt;&amp;gt;(Arrays.asList(3, 0, 2, 1)); assertEquals(expected, topologicalSort.</description>
            <content type="html"><![CDATA[<p>Topological sort can be applied in scheduling problems.</p>
<p>Those types of problems can be solved when:</p>
<ul>
<li>tasks and precedence constraints are defined;</li>
<li>cycles are detected and removed.</li>
</ul>
<p>Implementation of cycle detection can be found <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/graph/CycleInDirectedGraph.java">here</a>.</p>
<p>Test should check that reverse post order is correct.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnPostOrder</span>() {
</span></span><span style="display:flex;"><span>        DirectedGraph directedGraph <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> DirectedGraph(4);
</span></span><span style="display:flex;"><span>        directedGraph.<span style="color:#a6e22e">addEdge</span>(1, 0);
</span></span><span style="display:flex;"><span>        directedGraph.<span style="color:#a6e22e">addEdge</span>(0, 3);
</span></span><span style="display:flex;"><span>        directedGraph.<span style="color:#a6e22e">addEdge</span>(1, 2);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        TopologicalSort topologicalSort <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TopologicalSort(directedGraph);
</span></span><span style="display:flex;"><span>        LinkedList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> expected <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>(Arrays.<span style="color:#a6e22e">asList</span>(3, 0, 2, 1));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(expected, topologicalSort.<span style="color:#a6e22e">getReversePostOrder</span>());
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><img src="../../images/topSort.png" alt="topSort.png"></p>
<p>This problem can be solved quite elegantly with the use of DFS (Depth First Search).
To get the reverse post order we need to put the vertex on stack (linked list) after the recursive call.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TopologicalSort</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[]</span> visited;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> postOrder;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">TopologicalSort</span>(DirectedGraph graph) {
</span></span><span style="display:flex;"><span>        visited <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[</span>graph.<span style="color:#a6e22e">getNumberOfVertices</span>()<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        postOrder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> ver <span style="color:#f92672">=</span> 0; ver <span style="color:#f92672">&lt;</span> graph.<span style="color:#a6e22e">getNumberOfVertices</span>(); ver<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>visited<span style="color:#f92672">[</span>ver<span style="color:#f92672">]</span>) {
</span></span><span style="display:flex;"><span>                dfs(graph, ver);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dfs</span>(DirectedGraph graph, <span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        visited<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> conVer : graph.<span style="color:#a6e22e">getConnectionsFor</span>(vertex)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>visited<span style="color:#f92672">[</span>conVer<span style="color:#f92672">]</span>) {
</span></span><span style="display:flex;"><span>                dfs(graph, conVer);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        postOrder.<span style="color:#a6e22e">add</span>(vertex);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getReversePostOrder</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> postOrder;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/graph/TopologicalSort.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/graph/TopologicalSortTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Linked List. Algorithms Series</title>
            <link>https://savchenko.tech/posts/linledlist/</link>
            <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/linledlist/</guid>
            <description>A Linked List is fundamental and incredibly useful. It enables implementation of bags, queues and stacks.
It is a recursive data structure. In the core of Linked List is Node that contains of generic item and reference to the next node.
Node abstraction would be a nested class in Linked List and would look like this:
private static class Node&amp;lt;E&amp;gt; { E value; Node&amp;lt;E&amp;gt; next; public Node(E value) { this.value = value; } } Insertion an element to the beginning of the Linked List.</description>
            <content type="html"><![CDATA[<p>A <strong>Linked List</strong> is fundamental and incredibly useful. It enables implementation of bags, queues and stacks.</p>
<p>It is a recursive data structure. In the core of Linked List is <strong>Node</strong> that contains of generic item and reference to
the next node.</p>
<p><img src="../../images/linkedlist.png" alt="linkedlist.png"></p>
<p>Node abstraction would be a nested class in Linked List and would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Node</span><span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>        E value;
</span></span><span style="display:flex;"><span>        Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> next;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Node</span>(E value) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><strong>Insertion an element to the beginning of the Linked List.</strong></p>
<p>To check that insertion is working correctly we need next test cases:</p>
<ul>
<li>element should be added to the head of the list</li>
<li>size of the list should increase correctly</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldAddSeveralElementToLinkedList</span>() {
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(25);
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(26);
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(27);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(27, linkedList.<span style="color:#a6e22e">iterator</span>().<span style="color:#a6e22e">next</span>());
</span></span><span style="display:flex;"><span>        assertEquals(3, linkedList.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>To add value to the beginning of the list we need to simply point the next link of the new node to the head and
assign head to the new node.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(E value) {
</span></span><span style="display:flex;"><span>        Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> newNode <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Node<span style="color:#f92672">&lt;&gt;</span>(value);
</span></span><span style="display:flex;"><span>        newNode.<span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> head;
</span></span><span style="display:flex;"><span>        head <span style="color:#f92672">=</span> newNode;
</span></span><span style="display:flex;"><span>        size<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><strong>Remove an element from the beginning of the Linked list.</strong></p>
<p>To remove the value from the beginning of the list we need to simply assign head to the next element.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> E <span style="color:#a6e22e">removeFromHead</span>() {
</span></span><span style="display:flex;"><span>        Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> first <span style="color:#f92672">=</span> head;
</span></span><span style="display:flex;"><span>        head <span style="color:#f92672">=</span> head.<span style="color:#a6e22e">next</span>;
</span></span><span style="display:flex;"><span>        size<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> first.<span style="color:#a6e22e">value</span>;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><strong>Reverse the Linked list.</strong></p>
<p>In test cases we need to check that head is pointing to the first added element.
Because insertion is happening to the beginning of the list (LIFO).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldRevertLinkedList</span>() {
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(25);
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(26);
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(27);
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">add</span>(28);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        linkedList.<span style="color:#a6e22e">reverseList</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(25, linkedList.<span style="color:#a6e22e">iterator</span>().<span style="color:#a6e22e">next</span>());
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>To reverse Linked list we need to maintain references to 3 consecutive nodes, first, second and reversed.
At each iteration we extract the node from the original list (first) and add it to the beginning of the reversed list.
Second node is the second node of what is left of the original list and Reversed is the head of reversed list.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">reverseList</span>() {
</span></span><span style="display:flex;"><span>        Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> first <span style="color:#f92672">=</span> head;
</span></span><span style="display:flex;"><span>        Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> reversed <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> (first <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            Node<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> next <span style="color:#f92672">=</span> first.<span style="color:#a6e22e">next</span>;
</span></span><span style="display:flex;"><span>            first.<span style="color:#a6e22e">next</span> <span style="color:#f92672">=</span> reversed;
</span></span><span style="display:flex;"><span>            reversed <span style="color:#f92672">=</span> first;
</span></span><span style="display:flex;"><span>            first <span style="color:#f92672">=</span> next;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        head <span style="color:#f92672">=</span> reversed;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> head;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/bagsqueuesstack/CustomLinkedListImpl.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/bagsqueuesstack/CustomLinkedListImplTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Prim&#39;s Algorithm. Greedy. Algorithms Series</title>
            <link>https://savchenko.tech/posts/greedy/</link>
            <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/greedy/</guid>
            <description>Prim&amp;rsquo;s algorithm is a greedy algorithm for computing Minimum Spanning Tree (MST).
Greedy algorithms is a technique used in designing and analyzing efficient algorithms. They typically apply to optimization problems in which you make a set of choices in order to arrive at an optimal solution. A greedy algorithm always makes the choice that looks best at the moment. It makes a locally optimal choice in hope that this choice leads to globally optimal solution.</description>
            <content type="html"><![CDATA[<p>Prim&rsquo;s algorithm is a greedy algorithm for computing Minimum Spanning Tree (MST).</p>
<p><strong>Greedy algorithms</strong> is a technique used in designing and analyzing efficient algorithms.
They typically apply to optimization problems  in which you make a set of choices in order to arrive at an optimal
solution. A greedy algorithm always makes the choice that looks best at the moment. It makes a locally optimal choice
in hope that this choice leads to globally optimal solution.</p>
<p><strong>Minimum spanning tree</strong> (MST) of an edge-weighted graph is spanning tree whose weight (the sum of the weights of its edges)
is no larger than the weight of any other spanning tree.</p>
<p><strong>Spanning tree</strong> of a graph is a connected subgraph that includes all the vertices and has no cycles.</p>
<p><img src="../../images/mst.png" alt="mst.png"></p>
<p>Unit test should check that there are right amount of edges in MST and the weight of MST is correct.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>   <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnMSTEdges</span>() {
</span></span><span style="display:flex;"><span>            WeightedGraph weightedGraph <span style="color:#f92672">=</span> createWeightedGraph();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            MinimumSpanningTreePrims mst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MinimumSpanningTreePrims(weightedGraph);
</span></span><span style="display:flex;"><span>            Queue<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> mstEdges <span style="color:#f92672">=</span> mst.<span style="color:#a6e22e">getMstEdges</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(7, mstEdges.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnRightMSTWeight</span>() {
</span></span><span style="display:flex;"><span>            WeightedGraph weightedGraph <span style="color:#f92672">=</span> createWeightedGraph();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            MinimumSpanningTreePrims mst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MinimumSpanningTreePrims(weightedGraph);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">double</span> epsilon <span style="color:#f92672">=</span> 0.<span style="color:#a6e22e">000001d</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            assertEquals(1.<span style="color:#a6e22e">80</span>, mst.<span style="color:#a6e22e">getWeight</span>(), epsilon);
</span></span><span style="display:flex;"><span>            }
</span></span></code></pre></div><p>Implementation of the Prim&rsquo;s algorithm needs WeightedGraph and Edge classes.
It can be found <a href="https://github.com/marynasavchenko/algokata/tree/main/src/main/java/graph">here</a>.</p>
<p>The main idea of Prim&rsquo;s algorithm is to add a new edge to a single growing tree at each step.</p>
<ul>
<li>visit vertex, that has not been visited yet (starting from the first vertex)</li>
<li>mark it as visited</li>
<li>get all edges for this vertex</li>
<li>add edge to priority queue (by weight) if it has not visited vertices</li>
<li>get (remove) lowest-weight edge from priority queue</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MinimumSpanningTreePrims</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[]</span> visitedVertices;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Queue<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> mstEdges;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> PriorityQueue<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> crossingEdges;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">MinimumSpanningTreePrims</span>(WeightedGraph graph) {
</span></span><span style="display:flex;"><span>        crossingEdges <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PriorityQueue<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        visitedVertices <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[</span>graph.<span style="color:#a6e22e">getNumberOfVertices</span>()<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        mstEdges <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedBlockingQueue<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        visit(graph, 0);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>crossingEdges.<span style="color:#a6e22e">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>            Edge edge <span style="color:#f92672">=</span> crossingEdges.<span style="color:#a6e22e">remove</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> oneVertex <span style="color:#f92672">=</span> edge.<span style="color:#a6e22e">getOneVertex</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> otherVertex <span style="color:#f92672">=</span> edge.<span style="color:#a6e22e">getOtherVertex</span>(oneVertex);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (visitedVertices<span style="color:#f92672">[</span>oneVertex<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> visitedVertices<span style="color:#f92672">[</span>otherVertex<span style="color:#f92672">]</span>) <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>            mstEdges.<span style="color:#a6e22e">add</span>(edge);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>visitedVertices<span style="color:#f92672">[</span>oneVertex<span style="color:#f92672">]</span>) visit(graph, oneVertex);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>visitedVertices<span style="color:#f92672">[</span>otherVertex<span style="color:#f92672">]</span>) visit(graph, otherVertex);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Queue<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getMstEdges</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> mstEdges;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">double</span> <span style="color:#a6e22e">getWeight</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">double</span> weight <span style="color:#f92672">=</span> 0.<span style="color:#a6e22e">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (Edge edge : getMstEdges()) {
</span></span><span style="display:flex;"><span>            weight <span style="color:#f92672">+=</span> edge.<span style="color:#a6e22e">getWeight</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> weight;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">visit</span>(WeightedGraph graph, <span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        visitedVertices<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (Edge edge : graph.<span style="color:#a6e22e">getEdgesFor</span>(vertex)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isOtherVertexVisited(edge, vertex)) {
</span></span><span style="display:flex;"><span>                crossingEdges.<span style="color:#a6e22e">add</span>(edge);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isOtherVertexVisited</span>(Edge edge, <span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> otherVertex <span style="color:#f92672">=</span> edge.<span style="color:#a6e22e">getOtherVertex</span>(vertex);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> visitedVertices<span style="color:#f92672">[</span>otherVertex<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/graph/MinimumSpanningTreePrims.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/graph/MinimumSpanningTreePrimsTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Breadth First Search. Algorithms Series</title>
            <link>https://savchenko.tech/posts/bfs/</link>
            <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/bfs/</guid>
            <description>In this article we will be looking at Single-source shortest path problem. The classical method for solving it is Breadth First Search (BFS). In BFS we want to explore the vertices in order of their distance from the source. It could be achieved with queue and filling in last edge on the shortest path for every vertex.
Unit test should check if the shortest path is returned, when there is longer path in the graph.</description>
            <content type="html"><![CDATA[<p>In this article we will be looking at Single-source shortest path problem.
The classical method for solving it is Breadth First Search (BFS).
In BFS we want to explore the vertices in order of their distance from the source. It could be achieved with queue and
filling in last edge on the shortest path for every vertex.</p>
<p><img src="../../images/bfs_graph.png" alt="bfs_graph.png"></p>
<p>Unit test should check if the shortest path is returned, when there is longer path in the graph.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnShortestPath</span>() {
</span></span><span style="display:flex;"><span>        Graph graph <span style="color:#f92672">=</span> createGraph();
</span></span><span style="display:flex;"><span>        BreadthFirstPath bfp <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BreadthFirstPath(graph, 0);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> path <span style="color:#f92672">=</span> bfp.<span style="color:#a6e22e">getPathTo</span>(6);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(6, path.<span style="color:#a6e22e">get</span>(0));
</span></span><span style="display:flex;"><span>        assertEquals(5, path.<span style="color:#a6e22e">get</span>(1));
</span></span><span style="display:flex;"><span>        assertEquals(0, path.<span style="color:#a6e22e">get</span>(2));
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p>In implementation, we put in the queue source vertex, mark it as visited and remove from the queue. Then put in the queue all connected vertices
which has not been visited yet and set pathTo for all the connected vertices.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BreadthFirstPath</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[]</span> visited;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> pathTo;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">[]</span> numberOfEdges;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">BreadthFirstPath</span>(Graph graph, <span style="color:#66d9ef">int</span> sourceVertex) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> numberOfVertices <span style="color:#f92672">=</span> graph.<span style="color:#a6e22e">getNumberOfVertices</span>();
</span></span><span style="display:flex;"><span>        visited <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[</span>numberOfVertices<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        pathTo <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[</span>numberOfVertices<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        numberOfEdges <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[</span>numberOfVertices<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        bfs(graph, sourceVertex);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bfs</span>(Graph graph, <span style="color:#66d9ef">int</span> sourceVertex) {
</span></span><span style="display:flex;"><span>        Queue<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> queue <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedBlockingQueue<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> ver <span style="color:#f92672">=</span> 0; ver <span style="color:#f92672">&lt;</span> graph.<span style="color:#a6e22e">getNumberOfVertices</span>(); ver<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>            numberOfEdges<span style="color:#f92672">[</span>ver<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer.<span style="color:#a6e22e">MAX_VALUE</span>;
</span></span><span style="display:flex;"><span>        numberOfEdges<span style="color:#f92672">[</span>sourceVertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> 0;
</span></span><span style="display:flex;"><span>        visited<span style="color:#f92672">[</span>sourceVertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        queue.<span style="color:#a6e22e">add</span>(sourceVertex);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>queue.<span style="color:#a6e22e">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> vertex <span style="color:#f92672">=</span> queue.<span style="color:#a6e22e">remove</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> connectedVertex : graph.<span style="color:#a6e22e">getConnectionsFor</span>(vertex)) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>visited<span style="color:#f92672">[</span>connectedVertex<span style="color:#f92672">]</span>) {
</span></span><span style="display:flex;"><span>                    pathTo<span style="color:#f92672">[</span>connectedVertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> vertex;
</span></span><span style="display:flex;"><span>                    numberOfEdges<span style="color:#f92672">[</span>connectedVertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> numberOfEdges<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span> <span style="color:#f92672">+</span>1;
</span></span><span style="display:flex;"><span>                    visited<span style="color:#f92672">[</span>connectedVertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>                    queue.<span style="color:#a6e22e">add</span>(connectedVertex);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasPathTo</span>(<span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> visited<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getPathTo</span>(<span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> path <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> ver;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (ver <span style="color:#f92672">=</span> vertex; numberOfEdges<span style="color:#f92672">[</span>ver<span style="color:#f92672">]</span> <span style="color:#f92672">!=</span> 0; ver <span style="color:#f92672">=</span> pathTo<span style="color:#f92672">[</span>ver<span style="color:#f92672">]</span>)
</span></span><span style="display:flex;"><span>            path.<span style="color:#a6e22e">add</span>(ver);
</span></span><span style="display:flex;"><span>        path.<span style="color:#a6e22e">add</span>(ver);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> path;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/graph/BreadthFirstPath.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/graph/BreadthFirstPathTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Depth First Search. Algorithms Series</title>
            <link>https://savchenko.tech/posts/dfs/</link>
            <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/dfs/</guid>
            <description>Graph algorithms solve many problems in computer science and are fundamental to the field. Depth First Search (DFS) is one of them.
Representation of a graph Before we dive into DFS we need to understand Graph structure and terminology.
Graph is a set of vertices and a collection of edges that each connect a pair of vertices.
Examples of a Graph would be:
in finance : Currency is a vertex, transaction is an edge in transportation : Street intersection is a vertex, route is an edge Vertex 1 is connected to Vertex 2 when there is an edge between them.</description>
            <content type="html"><![CDATA[<p>Graph algorithms solve many problems in computer science and are
fundamental to the field. Depth First Search (DFS) is one of them.</p>
<h3 id="representation-of-a-graph">Representation of a graph</h3>
<p>Before we dive into DFS we need to understand Graph structure and terminology.</p>
<p><strong>Graph</strong> is a set of vertices and a collection of edges that each connect a pair of vertices.</p>
<p>Examples of a Graph would be:</p>
<ul>
<li>in finance : Currency is a vertex, transaction is an edge</li>
<li>in transportation : Street intersection is a vertex, route is an edge</li>
</ul>
<p>Vertex 1 is connected to Vertex 2 when there is an edge between them.</p>
<p><img src="../../images/graph.png" alt="graph.png"></p>
<p>So, in implementation we will use a vertex-indexed array of lists of vertices connected to each vertex.</p>
<p><img src="../../images/graph_list.png" alt="graph_list.png"></p>
<p>Test is checking that graph is created, and vertex with index 3 has 3 connections.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldCreateGraph</span>() {
</span></span><span style="display:flex;"><span>        Graph graph <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Graph(6);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(0,1);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(0,4);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(0,5);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(2,3);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(2,4);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(3,4);
</span></span><span style="display:flex;"><span>        graph.<span style="color:#a6e22e">addEdge</span>(3,5);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(3, graph.<span style="color:#a6e22e">getConnectionsFor</span>(3).<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(2, graph.<span style="color:#a6e22e">getConnectionsFor</span>(3).<span style="color:#a6e22e">get</span>(0));
</span></span><span style="display:flex;"><span>        assertEquals(4, graph.<span style="color:#a6e22e">getConnectionsFor</span>(3).<span style="color:#a6e22e">get</span>(1));
</span></span><span style="display:flex;"><span>        assertEquals(5, graph.<span style="color:#a6e22e">getConnectionsFor</span>(3).<span style="color:#a6e22e">get</span>(2));
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Graph</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> numberOfVertices;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> numberOfEdges;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> LinkedList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;[]</span> connections;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Graph</span>(<span style="color:#66d9ef">int</span> numberOfVertices) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">numberOfVertices</span> <span style="color:#f92672">=</span> numberOfVertices;
</span></span><span style="display:flex;"><span>        connections <span style="color:#f92672">=</span> (LinkedList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;[]</span>) <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">[</span>numberOfVertices<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> vertex <span style="color:#f92672">=</span> 0; vertex <span style="color:#f92672">&lt;</span> numberOfVertices; vertex<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            connections<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">addEdge</span>(<span style="color:#66d9ef">int</span> vertex1, <span style="color:#66d9ef">int</span> vertex2) {
</span></span><span style="display:flex;"><span>        numberOfEdges<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        connections<span style="color:#f92672">[</span>vertex1<span style="color:#f92672">]</span>.<span style="color:#a6e22e">add</span>(vertex2);
</span></span><span style="display:flex;"><span>        connections<span style="color:#f92672">[</span>vertex2<span style="color:#f92672">]</span>.<span style="color:#a6e22e">add</span>(vertex1);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getConnectionsFor</span>(<span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> connections<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getNumberOfVertices</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> numberOfVertices;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getNumberOfEdges</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> numberOfEdges;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now with graph in place we can proceed with DFS implementation.</p>
<p>Test is checking that all vertices are visited by DFS.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">allVerticesShouldBeVisited</span>() {
</span></span><span style="display:flex;"><span>        Graph graph <span style="color:#f92672">=</span> createGraph();
</span></span><span style="display:flex;"><span>        DepthFirstSearch dfs <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> DepthFirstSearch(graph, 0);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertTrue(dfs.<span style="color:#a6e22e">isVisited</span>(1));
</span></span><span style="display:flex;"><span>        assertTrue(dfs.<span style="color:#a6e22e">isVisited</span>(2));
</span></span><span style="display:flex;"><span>        assertTrue(dfs.<span style="color:#a6e22e">isVisited</span>(3));
</span></span><span style="display:flex;"><span>        assertTrue(dfs.<span style="color:#a6e22e">isVisited</span>(4));
</span></span><span style="display:flex;"><span>        assertTrue(dfs.<span style="color:#a6e22e">isVisited</span>(5));
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Implementation is pretty simple, we pass graph and source from where we want to start. Mark the source vertex as visible, get
connections for that vertex and do the same recursively for every vertex.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DepthFirstSearch</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[]</span> visited;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">DepthFirstSearch</span>(Graph graph, <span style="color:#66d9ef">int</span> sourceVertex) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">visited</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">boolean</span><span style="color:#f92672">[</span>graph.<span style="color:#a6e22e">getNumberOfVertices</span>()<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        dfs(graph, sourceVertex);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dfs</span>(Graph graph, <span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        visited<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> connectedVertex : graph.<span style="color:#a6e22e">getConnectionsFor</span>(vertex)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>visited<span style="color:#f92672">[</span>connectedVertex<span style="color:#f92672">]</span>) {
</span></span><span style="display:flex;"><span>                dfs(graph, connectedVertex);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isVisited</span>(<span style="color:#66d9ef">int</span> vertex) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> visited<span style="color:#f92672">[</span>vertex<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/graph">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/graph">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Hash Table. Algorithms Series</title>
            <link>https://savchenko.tech/posts/hashtable/</link>
            <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/hashtable/</guid>
            <description>Dictionary operations (INSERT, SEARCH and DELETE) are required by many applications. One very effective data structures for implementing dictionaries is hash table. The average time to search for an element in hash table is O(1).
Hash table ia unordered symbol table where key is interpreted as an array index and value associated with key &amp;lsquo;i&amp;rsquo; is stored in array entry &amp;lsquo;i&amp;rsquo;.
Two main parts in hash algorithm are hash function and collision resolution method.</description>
            <content type="html"><![CDATA[<p>Dictionary operations (INSERT, SEARCH and DELETE) are required by many applications.
One very effective data structures for implementing dictionaries is hash table. The average time to search for an element
in hash table is O(1).</p>
<p>Hash table ia unordered symbol table where key is interpreted as an array index and value associated with key &lsquo;i&rsquo; is stored
in array entry &lsquo;i&rsquo;.</p>
<p><img src="../../images/hashtable.png" alt="hashtable.png"></p>
<p>Two main parts in hash algorithm are hash function and collision resolution method.</p>
<h3 id="hash-function">HASH FUNCTION</h3>
<p>There are 3 primary requirements for implementing a good hash function:</p>
<ul>
<li>it should be consistent - equal keys must produce the same hash value.</li>
<li>it should be efficient to complete.</li>
<li>it should uniformly distribute the keys.</li>
</ul>
<p>We can check consistency and distribution with a simple test:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldHashKey</span>() {
</span></span><span style="display:flex;"><span>        HashTable<span style="color:#f92672">&lt;</span>String, Integer<span style="color:#f92672">&gt;</span> hashTable <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashTable<span style="color:#f92672">&lt;&gt;</span>(7);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> christianCode <span style="color:#f92672">=</span> hashTable.<span style="color:#a6e22e">hash</span>(<span style="color:#e6db74">&#34;Christian&#34;</span>);
</span></span><span style="display:flex;"><span>        assertEquals(0, christianCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> davidCode <span style="color:#f92672">=</span> hashTable.<span style="color:#a6e22e">hash</span>(<span style="color:#e6db74">&#34;David&#34;</span>);
</span></span><span style="display:flex;"><span>        assertEquals(2, davidCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> aliceCode <span style="color:#f92672">=</span> hashTable.<span style="color:#a6e22e">hash</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>);
</span></span><span style="display:flex;"><span>        assertEquals(4, aliceCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> tomCode <span style="color:#f92672">=</span> hashTable.<span style="color:#a6e22e">hash</span>(<span style="color:#e6db74">&#34;Tom&#34;</span>);
</span></span><span style="display:flex;"><span>        assertEquals(6, tomCode);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hash</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> h <span style="color:#f92672">=</span> key.<span style="color:#a6e22e">hashCode</span>();
</span></span><span style="display:flex;"><span>        h <span style="color:#f92672">^=</span> (h <span style="color:#f92672">&gt;&gt;&gt;</span> 20) <span style="color:#f92672">^</span> (h <span style="color:#f92672">&gt;&gt;&gt;</span> 12) <span style="color:#f92672">^</span> (h <span style="color:#f92672">&gt;&gt;&gt;</span> 7) <span style="color:#f92672">^</span> (h <span style="color:#f92672">&gt;&gt;&gt;</span> 4);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> h <span style="color:#f92672">&amp;</span> (tableSize <span style="color:#f92672">-</span> 1);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h3 id="collision-resolution">COLLISION RESOLUTION</h3>
<p>Collision resolution handles the case when two or more keys to be inserted hash to the same index.
Straightforward strategy for collision resolution is <strong>separate chaining</strong>.
For each index in array there is a data structure like Linked List or a Tree Map and keys from this data structure are
hashed to this index.</p>
<p><img src="../../images/hashtable_sep_chain.png" alt="hashtable_sep_chain.png"></p>
<p>Implementation of this kind of hash table is not too complicated.
So in test cases we need to check that:</p>
<ul>
<li>inserted value is present</li>
<li>deleted value is absent</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">insertedValueShouldBePresent</span>() {
</span></span><span style="display:flex;"><span>        HashTable<span style="color:#f92672">&lt;</span>String, Integer<span style="color:#f92672">&gt;</span> hashTable <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashTable<span style="color:#f92672">&lt;&gt;</span>(5);
</span></span><span style="display:flex;"><span>        hashTable.<span style="color:#a6e22e">put</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, 123654);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(123654, hashTable.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">removedValueShouldBeAbsent</span>() {
</span></span><span style="display:flex;"><span>        HashTable<span style="color:#f92672">&lt;</span>String, Integer<span style="color:#f92672">&gt;</span> hashTable <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashTable<span style="color:#f92672">&lt;&gt;</span>(5);
</span></span><span style="display:flex;"><span>        hashTable.<span style="color:#a6e22e">put</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, 123654);
</span></span><span style="display:flex;"><span>        hashTable.<span style="color:#a6e22e">put</span>(<span style="color:#e6db74">&#34;David&#34;</span>, 456123);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        hashTable.<span style="color:#a6e22e">delete</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>);
</span></span><span style="display:flex;"><span>        assertNull(hashTable.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>));
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">put</span>(Key key, Value value) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (value <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            delete(key);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (keyValuePairsNumber <span style="color:#f92672">&gt;=</span> 10 <span style="color:#f92672">*</span> tableSize) resize(2 <span style="color:#f92672">*</span> tableSize);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> hash(key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>chains<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">containsKey</span>(key)) keyValuePairsNumber<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        chains<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">put</span>(key, value);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Value <span style="color:#a6e22e">get</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> hash(key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> chains<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">get</span>(key);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">delete</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> hash(key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (chains<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">containsKey</span>(key)) keyValuePairsNumber<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>        chains<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">remove</span>(key);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (keyValuePairsNumber <span style="color:#f92672">&lt;=</span> 2 <span style="color:#f92672">*</span> tableSize) resize(tableSize <span style="color:#f92672">/</span> 2);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/searching/HashTable.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/searching/HashTableTest.java">test cases</a> can be found on my GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Red Black Binary Search Tree: Part 2 delete. Algorithms Series</title>
            <link>https://savchenko.tech/posts/rbbst2/</link>
            <pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/rbbst2/</guid>
            <description>To implement delete() method we need to take care about helper methods first. First we will take a look at deleteMin().
DELETE MIN Test cases for deleteMin() should check that:
minimal element is not present tree is balanced, which means: there is no more than 1 left RED links in the row there is no right RED link root should be always BLACK @Test void shouldDeleteMinElement() { RedBlackBinarySearchTree&amp;lt;Integer, String&amp;gt; brBinarySearchTree = createRedBlackBST(); brBinarySearchTree.</description>
            <content type="html"><![CDATA[<p>To implement delete() method we need to take care about helper methods first.
First we will take a look at deleteMin().</p>
<h3 id="delete-min">DELETE MIN</h3>
<p>Test cases for deleteMin() should check that:</p>
<ul>
<li>minimal element is not present</li>
<li>tree is balanced, which means:
<ul>
<li>there is no more than 1 left RED links in the row</li>
<li>there is no right RED link</li>
<li>root should be always BLACK</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldDeleteMinElement</span>() {
</span></span><span style="display:flex;"><span>        RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">deleteMin</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertNull(brBinarySearchTree.<span style="color:#a6e22e">get</span>(8));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">treeShouldBeRebalancedAfterDeleteMin</span>() {
</span></span><span style="display:flex;"><span>        RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">deleteMin</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;23&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertFalse(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be black&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;14&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertTrue(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be red&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;13&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertFalse(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be black &#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;25&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertFalse(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be black&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><img src="../../images/rb_bst_before_del_min.png" alt="rb_bst_before_del_min.png"></p>
<p>2 more helper methods for achieving balance will be moveRedLeft() and moveRedRight().</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">moveRedLeft</span>(Node node) {
</span></span><span style="display:flex;"><span>        flipColors(node);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (isRed(node.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>)) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> rotateRight(node.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> rotateLeft(node);
</span></span><span style="display:flex;"><span>            flipColors(node);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">moveRedRight</span>(Node node) {
</span></span><span style="display:flex;"><span>        flipColors(node);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (isRed(node.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>)) {
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> rotateRight(node);
</span></span><span style="display:flex;"><span>            flipColors(node);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>With helper methods in place we can move on with implementation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deleteMin</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isRed(root.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>isRed(root.<span style="color:#a6e22e">right</span>))
</span></span><span style="display:flex;"><span>        root.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> RED;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span> deleteMin(root);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (root <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) root.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> BLACK;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">deleteMin</span>(Node node) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>))
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> moveRedLeft(node);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> deleteMin(node.<span style="color:#a6e22e">left</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> balanceBST(node);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><img src="../../images/rb_bst_after_del_min.png" alt="rb_bst_after_del_min.png"></p>
<h3 id="delete">DELETE</h3>
<p>Test cases for delete() will be similar to deleteMin().
They should check:</p>
<ul>
<li>given key is not present</li>
<li>tree is rebalanced</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldDeleteElementByKey</span>() {
</span></span><span style="display:flex;"><span>        RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">delete</span>(32);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertNull(brBinarySearchTree.<span style="color:#a6e22e">get</span>(32));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">treeShouldBeRebalancedAfterDelete</span>() {
</span></span><span style="display:flex;"><span>        RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">delete</span>(32);
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;14&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;28&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertFalse(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be black&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;23&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertTrue(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be red&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;33&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertTrue(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be red&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Deletion implementation is based on deletion of simple BST. It gets a bit more complicated because we need to keep the
balance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">delete</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isRed(root.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>isRed(root.<span style="color:#a6e22e">right</span>))
</span></span><span style="display:flex;"><span>            root.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> RED;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span> delete(root, key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (root <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) root.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> BLACK;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">delete</span>(Node node, Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>) <span style="color:#f92672">&lt;</span> 0) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>))
</span></span><span style="display:flex;"><span>                node <span style="color:#f92672">=</span> moveRedLeft(node);
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> delete(node.<span style="color:#a6e22e">left</span>, key);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (isRed(node.<span style="color:#a6e22e">left</span>))
</span></span><span style="display:flex;"><span>                node <span style="color:#f92672">=</span> rotateRight(node);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>) <span style="color:#f92672">==</span> 0 <span style="color:#f92672">&amp;&amp;</span> (node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>))
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">right</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>))
</span></span><span style="display:flex;"><span>                node <span style="color:#f92672">=</span> moveRedRight(node);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>) <span style="color:#f92672">==</span> 0) {
</span></span><span style="display:flex;"><span>                Node x <span style="color:#f92672">=</span> min(node.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>                node.<span style="color:#a6e22e">key</span> <span style="color:#f92672">=</span> x.<span style="color:#a6e22e">key</span>;
</span></span><span style="display:flex;"><span>                node.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> x.<span style="color:#a6e22e">value</span>;
</span></span><span style="display:flex;"><span>                node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> deleteMin(node.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">else</span> node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> delete(node.<span style="color:#a6e22e">right</span>, key);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> balanceBST(node);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p><img src="../../images/rb_bst_after_del_full.png" alt="rb_bst_after_del_full.png"></p>
<p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/searching/RedBlackBinarySearchTree.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/searching/RedBlackBinarySearchTreeTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Red Black Binary Search Tree: Part 1 put. Algorithms Series</title>
            <link>https://savchenko.tech/posts/rbbst/</link>
            <pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/rbbst/</guid>
            <description>Red-Black Tree is a Binary Search Tree with one extra bit of storage per node - color, which can be either RED or BLACK. We need it to keep BST &amp;ldquo;balanced&amp;rdquo;, that means basic dynamic set operations will be fast (guaranteed time O(lg n) ).
Red-black tree has next properties:
Every node is RED or BLACK The root id always BlACK Every null leaf is black If a node is RED, then both children are BLACK For each node, all simple paths from the node to descendant leaves contain the same number of BLACK nodes.</description>
            <content type="html"><![CDATA[<p>Red-Black Tree is a Binary Search Tree with one extra bit of storage per node - color, which can be either RED or BLACK.
We need it to keep BST &ldquo;balanced&rdquo;, that means basic dynamic set operations will be fast (guaranteed time O(lg n) ).</p>
<p>Red-black tree has next properties:</p>
<ol>
<li>Every node is RED or BLACK</li>
<li>The root id always BlACK</li>
<li>Every null leaf is black</li>
<li>If a node is RED, then both children are BLACK</li>
<li>For each node, all simple  paths from the node to descendant leaves contain the same number of BLACK nodes.</li>
</ol>
<p>To get started with test cases we need a skeleton first.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RedBlackBinarySearchTree</span><span style="color:#f92672">&lt;</span>Key <span style="color:#66d9ef">extends</span> Comparable<span style="color:#f92672">&lt;</span>Key<span style="color:#f92672">&gt;</span>, Value<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span> RED <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span> BLACK <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node root;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Node</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Key key;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Value value;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Node right;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Node left;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">int</span> nodeNumber;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">boolean</span> color;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> <span style="color:#a6e22e">Node</span>(Key key, Value value, <span style="color:#66d9ef">int</span> nodeNumber, <span style="color:#66d9ef">boolean</span> color) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">key</span> <span style="color:#f92672">=</span> key;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">nodeNumber</span> <span style="color:#f92672">=</span> nodeNumber;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> color;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isRed</span>(Node node) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">color</span> <span style="color:#f92672">==</span> RED;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Methods get() and size() are the same as in Binary search tree.</p>
<h3 id="put">PUT</h3>
<p>Test cases for put should check that:</p>
<ul>
<li>value is present</li>
<li>there is no more than 1 left RED links in the row</li>
<li>there is no right RED link</li>
<li>root should be always BLACK</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>   <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">valueShouldBePresentWhenPut</span>() {
</span></span><span style="display:flex;"><span>            RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RedBlackBinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(15, <span style="color:#e6db74">&#34;AnyValue&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;AnyValue&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">get</span>(15));
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">rootShouldBeBlack</span>() {
</span></span><span style="display:flex;"><span>            RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;28&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertFalse(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Root should be black&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">leftLinkShouldBeRed</span>() {
</span></span><span style="display:flex;"><span>            RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;14&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertTrue(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should be red&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldBeNoMoreThanOneLeftRedLinkInARow</span>() {
</span></span><span style="display:flex;"><span>            RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> createRedBlackBST();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(<span style="color:#e6db74">&#34;11&#34;</span>, brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>        assertFalse(brBinarySearchTree.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span>, <span style="color:#e6db74">&#34;Should not be 2 red left in a row&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">createRedBlackBST</span>() {
</span></span><span style="display:flex;"><span>        RedBlackBinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> brBinarySearchTree <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RedBlackBinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(8, <span style="color:#e6db74">&#34;8&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(11, <span style="color:#e6db74">&#34;11&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(14, <span style="color:#e6db74">&#34;14&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(13, <span style="color:#e6db74">&#34;13&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(16, <span style="color:#e6db74">&#34;16&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;23&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(25, <span style="color:#e6db74">&#34;25&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(28, <span style="color:#e6db74">&#34;28&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(32, <span style="color:#e6db74">&#34;32&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(33, <span style="color:#e6db74">&#34;33&#34;</span>);
</span></span><span style="display:flex;"><span>        brBinarySearchTree.<span style="color:#a6e22e">put</span>(36, <span style="color:#e6db74">&#34;36&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> brBinarySearchTree;
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p><img src="../../images/rb_bst.png" alt="rb_bst.png"></p>
<p>Code for the implementation of put() method is very similar to BST implementation except conditions that balance tree.
To achieve balance we need to implement rotateLeft(), rotateRight() and flipColors() methods first.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">rotateLeft</span>(Node node) {
</span></span><span style="display:flex;"><span>        Node nodeToRotate <span style="color:#f92672">=</span> node.<span style="color:#a6e22e">right</span>;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> nodeToRotate.<span style="color:#a6e22e">left</span>;
</span></span><span style="display:flex;"><span>        nodeToRotate.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> node;
</span></span><span style="display:flex;"><span>        nodeToRotate.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> node.<span style="color:#a6e22e">color</span>;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> RED;
</span></span><span style="display:flex;"><span>        nodeToRotate.<span style="color:#a6e22e">nodeNumber</span> <span style="color:#f92672">=</span> node.<span style="color:#a6e22e">nodeNumber</span>;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">nodeNumber</span> <span style="color:#f92672">=</span> 1 <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> nodeToRotate;
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p><img src="../../images/leftRotation.png" alt="leftRotation.png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">rotateRight</span>(Node node) {
</span></span><span style="display:flex;"><span>        Node nodeToRotate <span style="color:#f92672">=</span> node.<span style="color:#a6e22e">left</span>;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> nodeToRotate.<span style="color:#a6e22e">right</span>;
</span></span><span style="display:flex;"><span>        nodeToRotate.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> node;
</span></span><span style="display:flex;"><span>        nodeToRotate.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> node.<span style="color:#a6e22e">color</span>;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> RED;
</span></span><span style="display:flex;"><span>        nodeToRotate.<span style="color:#a6e22e">nodeNumber</span> <span style="color:#f92672">=</span> node.<span style="color:#a6e22e">nodeNumber</span>;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">nodeNumber</span> <span style="color:#f92672">=</span> 1 <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> nodeToRotate;
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p><img src="../../images/rightRotation.png" alt="rightRotation.png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">flipColors</span>(Node node) {
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> RED;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> BLACK;
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> BLACK;
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p><img src="../../images/flipColors.png" alt="flipColors.png"></p>
<p>After those methods in place, we can complete the implementation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">put</span>(Key key, Value value) {
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span> put(root, key, value);
</span></span><span style="display:flex;"><span>        root.<span style="color:#a6e22e">color</span> <span style="color:#f92672">=</span> BLACK;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">put</span>(Node node, Key key, Value value) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Node(key, value, 1, RED);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> compare <span style="color:#f92672">=</span> key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (compare <span style="color:#f92672">&lt;</span> 0) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> put(node.<span style="color:#a6e22e">left</span>, key, value);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (compare <span style="color:#f92672">&gt;</span> 0) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> put(node.<span style="color:#a6e22e">right</span>, key, value);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (isRed(node.<span style="color:#a6e22e">right</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>isRed(node.<span style="color:#a6e22e">left</span>)) node <span style="color:#f92672">=</span> rotateLeft(node);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (isRed(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">&amp;&amp;</span> isRed(node.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">left</span>)) node <span style="color:#f92672">=</span> rotateRight(node);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (isRed(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">&amp;&amp;</span> isRed(node.<span style="color:#a6e22e">right</span>)) flipColors(node);
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">nodeNumber</span> <span style="color:#f92672">=</span> size(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">right</span>) <span style="color:#f92672">+</span> 1;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/searching/RedBlackBinarySearchTree.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/searching/RedBlackBinarySearchTreeTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Binary Search Tree: Part 2 min, floor, delete. Algorithms Series</title>
            <link>https://savchenko.tech/posts/bst2/</link>
            <pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/bst2/</guid>
            <description>An important feature of Binary Search Tree (BST) is that it allows keeping keys in order. So we are able to apply wide range of operations that involves relative key order.
In this article we will take a look at some of them.
As in the previous part we will use TDD to ensure algorithm correctness.
MIN min() method should return the smallest key.
@Test void shouldReturnMinKeyInBST() { BinarySearchTree&amp;lt;Integer, String&amp;gt; bst = new BinarySearchTree&amp;lt;&amp;gt;(); bst.</description>
            <content type="html"><![CDATA[<p>An important feature of Binary Search Tree (BST) is that it allows keeping keys in order. So we are able to apply wide range of
operations that involves relative key order.</p>
<p>In this article we will take a look at some of them.</p>
<p>As in the previous part we will use TDD to ensure algorithm correctness.</p>
<h3 id="min">MIN</h3>
<p>min() method should return the smallest key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnMinKeyInBST</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;value1&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(15, <span style="color:#e6db74">&#34;value2&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(56, <span style="color:#e6db74">&#34;value3&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(7, <span style="color:#e6db74">&#34;value4&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(71, <span style="color:#e6db74">&#34;value5&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(7, bst.<span style="color:#a6e22e">min</span>());
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>The implementation of MIN key is quite simple, we need to go left recursively until left node is null.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Key <span style="color:#a6e22e">min</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> min(root).<span style="color:#a6e22e">key</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">min</span>(Node node) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> min(node.<span style="color:#a6e22e">left</span>);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>The implementation of MAX key will be the same, only we need to go recursively right.</p>
<h3 id="floor-and-ceiling">Floor and ceiling</h3>
<p>floor() method should return the largest key less than or equal to given key.</p>
<p>ceiling() method should return smallest key grater than or equal to given key.
<img src="../../images/bst_floor_ceiling.png" alt="bst_floor_ceiling.png"></p>
<p>Test cases for floor() should check:</p>
<ul>
<li>that floor of an existing key in BST returns same key</li>
<li>that floor returns the largest key that less than given key</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnFloorWhenGivenKeyIsEqual</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;value1&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(14, <span style="color:#e6db74">&#34;value2&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(32, <span style="color:#e6db74">&#34;value3&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(14, bst.<span style="color:#a6e22e">floor</span>(14));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnFloorWhenGivenKeyIsLarger</span>() {
</span></span><span style="display:flex;"><span>            BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;value1&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(14, <span style="color:#e6db74">&#34;value2&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(32, <span style="color:#e6db74">&#34;value3&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(36, <span style="color:#e6db74">&#34;value4&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(33, <span style="color:#e6db74">&#34;value5&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(33, bst.<span style="color:#a6e22e">floor</span>(34));
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p>In the implementation we compare given key to the key of a Node to find Subtree first, and then key that smaller or equals to the key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Key <span style="color:#a6e22e">floor</span>(Key key) {
</span></span><span style="display:flex;"><span>        Node node <span style="color:#f92672">=</span> floor(root, key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">key</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">floor</span>(Node node, Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> keyCmp <span style="color:#f92672">=</span> key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (keyCmp <span style="color:#f92672">==</span> 0) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (keyCmp <span style="color:#f92672">&lt;</span> 0) <span style="color:#66d9ef">return</span> floor(node.<span style="color:#a6e22e">left</span>, key);
</span></span><span style="display:flex;"><span>        Node rightNode <span style="color:#f92672">=</span> floor(node.<span style="color:#a6e22e">right</span>, key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (rightNode <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">return</span> rightNode;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>ceiling() implementation will be the same as floor() with right, left and &lt;, &gt; interchanged.</p>
<h3 id="delete">DELETE</h3>
<p>Deletion in the BST can seem tricky, when you do not stare at those trees few days in a row.
First, we need to implement deleteMit() method. So it can be reused later in deletion.</p>
<p>Test case should check that there is no key present after deletion.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldDeleteMinElement</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;value1&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(14, <span style="color:#e6db74">&#34;value2&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(32, <span style="color:#e6db74">&#34;value3&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">deleteMin</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertNull(bst.<span style="color:#a6e22e">get</span>(14));
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>To delete element with a minimal key we need to go through next steps:</p>
<ul>
<li>find the minimal node - go left until left node is null</li>
<li>remove it - replace node to be deleted with the child right node</li>
<li>update node number</li>
</ul>
<p><img src="../../images/bst_delete_min.png" alt="bst_delete_min.png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">deleteMin</span>() {
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span> deleteMin(root);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">deleteMin</span>(Node node) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">right</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> deleteMin(node.<span style="color:#a6e22e">left</span>);
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">subtreeNodeNumber</span> <span style="color:#f92672">=</span> size(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">right</span>) <span style="color:#f92672">+</span> 1;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>With the deleteMin() in place we can proceed with delete.</p>
<p>Test cases for delete() should check:</p>
<ul>
<li>that there is no key present</li>
<li>that successor of deleted element is correct</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldDeleteElementByGivenKey</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;value1&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(14, <span style="color:#e6db74">&#34;value2&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(32, <span style="color:#e6db74">&#34;value3&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(36, <span style="color:#e6db74">&#34;value4&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(33, <span style="color:#e6db74">&#34;value5&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">delete</span>(32);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertNull(bst.<span style="color:#a6e22e">get</span>(32));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">successorShouldBeTheMinKeyInRightSubtree</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(23, <span style="color:#e6db74">&#34;value1&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(14, <span style="color:#e6db74">&#34;value2&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(32, <span style="color:#e6db74">&#34;value3&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(36, <span style="color:#e6db74">&#34;value4&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(28, <span style="color:#e6db74">&#34;value5&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(33, <span style="color:#e6db74">&#34;value6&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(45, <span style="color:#e6db74">&#34;value7&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(61, <span style="color:#e6db74">&#34;value8&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(41, <span style="color:#e6db74">&#34;value9&#34;</span>);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(50, <span style="color:#e6db74">&#34;value10&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">delete</span>(36);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(41, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>So, we need next steps to implement deletion:</p>
<ul>
<li>find the node by comparing the key</li>
<li>if node to delete has only one child, we simply replace it with a child node</li>
<li>save the node to be deleted</li>
<li>get the successor, which is minimal value of the right subtree min(node.right)</li>
<li>apply deleteMin() because we need to replace successor&rsquo;s node (left node) with the right node in this subtree</li>
<li>left link of the successor will be the left node to be deleted
<img src="../../images/bst_delete.png" alt="bst_delete.png"></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">delete</span>(Key key) {
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span>delete(root, key);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">delete</span>(Node node, Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> cmp <span style="color:#f92672">=</span> key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (cmp <span style="color:#f92672">&lt;</span> 0) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> delete(node.<span style="color:#a6e22e">left</span>, key);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (cmp <span style="color:#f92672">&gt;</span> 0) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> delete(node.<span style="color:#a6e22e">right</span>, key);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">left</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">right</span>;
</span></span><span style="display:flex;"><span>            Node nodeToDelete <span style="color:#f92672">=</span> node;
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// find successor</span>
</span></span><span style="display:flex;"><span>            node <span style="color:#f92672">=</span> min(nodeToDelete.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> nodeToDelete.<span style="color:#a6e22e">left</span>;
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> deleteMin(nodeToDelete.<span style="color:#a6e22e">right</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">subtreeNodeNumber</span> <span style="color:#f92672">=</span> size(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">right</span>) <span style="color:#f92672">+</span> 1;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Complete <a href="https://github.com/marynasavchenko/algokata/blob/main/src/main/java/searching/BinarySearchTree.java">implementation</a>
with <a href="https://github.com/marynasavchenko/algokata/blob/main/src/test/java/searching/BinarySearchTreeTest.java">test cases</a> can be found on GitHub.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Rust. The Promise of Fearless Concurrency</title>
            <link>https://savchenko.tech/posts/rust/</link>
            <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/rust/</guid>
            <description>Rust has been getting 1st place in Stack Overflow’s annual developer survey “most loved programming language” since 2016. Google develops parts of Android with Rust. Amazon Web Services (AWS) has used Rust since 2017 for its serverless computing offerings, AWS Lambda and AWS Fargate. Microsoft writes components of its Azure platform including a security daemon for its Internet of Things (IoT) service.
Big addition to this popularity wave was Linus Torvald&amp;rsquo;s announcement on Open Source Summit that Rust can be added to the Linux kernel in the next major release.</description>
            <content type="html"><![CDATA[<p>Rust has been getting 1st place in Stack Overflow’s annual developer survey “most loved programming language” since 2016.
Google develops parts of Android with Rust. Amazon Web Services (AWS) has used Rust since 2017 for its serverless computing offerings, AWS Lambda and AWS Fargate.
Microsoft writes components of its Azure platform including a security daemon for its Internet of Things (IoT) service.</p>
<p>Big addition to this popularity wave was Linus Torvald&rsquo;s announcement on <a href="https://events.linuxfoundation.org/open-source-summit-north-america/">Open Source Summit</a>
that Rust can be added to the Linux kernel in the next major release.</p>
<p>So, why Rust is getting so popular?</p>
<p>Rust was designed by Graydon Hoare while working at Mozilla Research in 2006-2011. It is a multi-paradigm, general-purpose programming language.</p>
<p>Main features of Rust are:</p>
<ul>
<li>
<p><strong>Performance.</strong></p>
<p>Rust offers all of your computer’s available performance. It does not rely on a garbage collector to provide its memory safety.
The Rust compiler aggressively optimizes both the size and speed of your program.</p>
</li>
<li>
<p><strong>Concurrency</strong></p>
<p>The jewel of Rust’s design is concurrency without data races.
Because concurrency is much safer to use in Rust, making it a technique you can design into your code from the beginning.
There is no global interpreter lock (GIL) to constrain a thread’s speed.
It also provides high-level abstractions like channels and worker thread pools to make concurrency convenient to use.</p>
</li>
<li>
<p><strong>Memory efficiency</strong></p>
<p>Rust enables you to create programs that require minimal memory.
When needed, you can use fixed-size structures and know exactly how every byte is managed.
High-level constructs, such as iteration and generic types, cause minimal runtime overhead.</p>
</li>
</ul>
<p>While Rust sounds like perfect language, it has disadvantages:</p>
<ul>
<li>
<p><strong>Cyclic data structures</strong></p>
<p>In Rust, it is difficult to model cyclic data like an arbitrary graph structure or doubly-linked list.</p>
</li>
<li>
<p><strong>Compile times</strong></p>
<p>Rust is slower at compiling code than its peer languages.
It has a complex compiler toolchain that receives multiple intermediate representations and sends lots of code to the LLVM compiler.
It requires whole-of-crate compilation.</p>
</li>
<li>
<p><strong>Learning curve</strong></p>
<p>Rust is very big! It has a rich type system, several dozen keywords, and includes some features that are unavailable in other languages.
These factors all combine to create a steep learning curve.</p>
</li>
</ul>
<p>Many companies have successfully built large software projects in Rust. Rust code is stable, fast, and light on resources.
It allows you to experiment without fear.
Sounds like next learning challenge.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.manning.com/books/rust-in-action">Rust in action by Tim McNamara</a></li>
<li><a href="https://www.amazon.de/Programming-Rust-Fast-Systems-Development/dp/1492052590/ref=asc_df_1492052590/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=474043209776&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13207285131415204152&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042532&amp;hvtargid=pla-1018945958587&amp;psc=1&amp;th=1&amp;psc=1">Programming Rust: Fast, Safe Systems Development by Jim Blandy, Jason Orendorff, Leonora Tindall</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Binary Search Tree: Part 1 put, get, size. Algorithms Series</title>
            <link>https://savchenko.tech/posts/bst/</link>
            <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/bst/</guid>
            <description>Development of computational infrastructure would not become available without effective searching algorithms. One type of such algorithms is symbol tables. Term symbol table is used to describe a mechanism where we can save information (value) and later retrieve it by specified key. Symbol tables sometimes also referred as dictionaries.
There are three main classic data structures that can support efficient symbol-table implementations: binary search trees, red -black trees and hash tables.</description>
            <content type="html"><![CDATA[<p>Development of computational infrastructure would not become available without effective searching algorithms.
One type of such algorithms is <strong>symbol tables</strong>. Term symbol table is  used to describe a mechanism where we can save
information (value) and later retrieve it by specified key. Symbol tables sometimes also referred as dictionaries.</p>
<p>There are three main classic data structures that can support efficient symbol-table implementations: binary search trees, red -black trees and hash tables.</p>
<p>In this article we will dive into implementation of <strong>Binary Search Tree (BST)</strong>.</p>
<p>To better understand implementation of BST, we will use TDD to test internal implementation. To get started with tests
cases, we need a skeleton of BST. BST is a recursive data structure made up of nodes.
Each node contains:</p>
<ul>
<li>key</li>
<li>value</li>
<li>links to left and right nodes</li>
<li>number of nodes in subtree</li>
</ul>
<p>Each node can have only one parent except root node, which has no parent.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BinarySearchTree</span><span style="color:#f92672">&lt;</span>Key <span style="color:#66d9ef">extends</span> Comparable<span style="color:#f92672">&lt;</span>Key<span style="color:#f92672">&gt;</span>, Value<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> Node root;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Node</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Key key;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Value value;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Node left;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> Node right;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">int</span> subtreeNodeNumber;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Node</span>(Key key, Value value, <span style="color:#66d9ef">int</span> subtreeNodeNumber) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">key</span> <span style="color:#f92672">=</span> key;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">subtreeNodeNumber</span> <span style="color:#f92672">=</span> subtreeNodeNumber;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">size</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> 0;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Value <span style="color:#a6e22e">get</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">put</span>(Key key, Value value) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> 0;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This code will allow us to write tests that will fail first.
Access modifiers &ldquo;protected&rdquo; is used for testing purposes only.
In this part we will implement put, size and get functionality.</p>
<h3 id="put">PUT</h3>
<p>To check that put is working correctly we need next test cases:</p>
<ul>
<li>left node should contain item with smaller key</li>
<li>right node should contain item with larger key</li>
<li>left node in the subtree should contain item with smaller key</li>
<li>size of BST is increased correctly</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BinarySearchTreeTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String LEFT_VALUE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;leftValue&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String ROOT_VALUE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rootValue&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String RIGHT_VALUE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rightValue&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> ROOT_KEY <span style="color:#f92672">=</span> 6;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> LEFT_KEY <span style="color:#f92672">=</span> 4;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> RIGHT_KEY <span style="color:#f92672">=</span> 8;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> SECOND_LEFT_KEY <span style="color:#f92672">=</span> 7;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String SECOND_LEFT_VALUE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2LeftValue&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">leftLinkShouldPointToItemWithSmallerKey</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(ROOT_KEY, ROOT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(LEFT_KEY, LEFT_VALUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(LEFT_KEY, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        assertEquals(LEFT_VALUE, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">rightLinkShouldPointToItemWithLargerKey</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(ROOT_KEY, ROOT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(RIGHT_KEY, RIGHT_VALUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(RIGHT_KEY, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        assertEquals(RIGHT_VALUE, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">secondLeftLinkShouldPointToItemWithSmallerKey</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(ROOT_KEY, ROOT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(RIGHT_KEY, RIGHT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(SECOND_LEFT_KEY, SECOND_LEFT_VALUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(SECOND_LEFT_KEY, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        assertEquals(SECOND_LEFT_VALUE, bst.<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">right</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnCorrectSizeOfBST</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(ROOT_KEY, ROOT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(LEFT_KEY, LEFT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(RIGHT_KEY, RIGHT_VALUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(3, bst.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Representation of inserted in test values would look like this:</p>
<p><img src="../../images/bst.png" alt="bst.png"></p>
<p>With test cases in place we can be confident in the implementation correctness:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">size</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> size(root);
</span></span><span style="display:flex;"><span>    } 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">size</span>(Node node) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> 0;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">subtreeNodeNumber</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Value <span style="color:#a6e22e">get</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">put</span>(Key key, Value value) {
</span></span><span style="display:flex;"><span>        root <span style="color:#f92672">=</span> put(root, key, value);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Node <span style="color:#a6e22e">put</span>(Node node, Key key, Value value) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Node(key, value, 1);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> compare <span style="color:#f92672">=</span> key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (compare <span style="color:#f92672">&lt;</span> 0) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> put(node.<span style="color:#a6e22e">left</span>, key, value);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (compare <span style="color:#f92672">&gt;</span> 0) {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">right</span> <span style="color:#f92672">=</span> put(node.<span style="color:#a6e22e">right</span>, key, value);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            node.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        node.<span style="color:#a6e22e">subtreeNodeNumber</span> <span style="color:#f92672">=</span> size(node.<span style="color:#a6e22e">left</span>) <span style="color:#f92672">+</span> size(node.<span style="color:#a6e22e">right</span>) <span style="color:#f92672">+</span> 1;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> node;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h3 id="get">GET</h3>
<p>For get functionality we need to check if the correct value is returned for a given key and if key is not present null is returned:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldGetRightValueForKey</span>() {
</span></span><span style="display:flex;"><span>        BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(ROOT_KEY, ROOT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(RIGHT_KEY, RIGHT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(SECOND_LEFT_KEY, SECOND_LEFT_VALUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertEquals(RIGHT_VALUE, bst.<span style="color:#a6e22e">get</span>(RIGHT_KEY));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shouldReturnNullWhenKeyIsNotPresent</span>() {
</span></span><span style="display:flex;"><span>            BinarySearchTree<span style="color:#f92672">&lt;</span>Integer, String<span style="color:#f92672">&gt;</span> bst <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BinarySearchTree<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(ROOT_KEY, ROOT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(RIGHT_KEY, RIGHT_VALUE);
</span></span><span style="display:flex;"><span>        bst.<span style="color:#a6e22e">put</span>(SECOND_LEFT_KEY, SECOND_LEFT_VALUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        assertNull(bst.<span style="color:#a6e22e">get</span>(NON_PRESENT_KEY));
</span></span><span style="display:flex;"><span>        }
</span></span></code></pre></div><p>In implementation recursive call for subtree will be used again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Value <span style="color:#a6e22e">get</span>(Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> get(root, key);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Value <span style="color:#a6e22e">get</span>(Node node, Key key) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (node <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> keyCmp <span style="color:#f92672">=</span> key.<span style="color:#a6e22e">compareTo</span>(node.<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (keyCmp <span style="color:#f92672">&lt;</span> 0) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> get(node.<span style="color:#a6e22e">left</span>, key);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (keyCmp <span style="color:#f92672">&gt;</span> 0) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> get(node.<span style="color:#a6e22e">right</span>, key);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> node.<span style="color:#a6e22e">value</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Full implementation can be found on <a href="https://github.com/marynasavchenko/algokata/tree/main/src/main/java/searching">GitHub</a>.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/Algorithms-Robert-Sedgewick/dp/032157351X/ref=asc_df_032157351X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=64736366074&amp;hvpone=&amp;hvptwo=&amp;hvadid=310624385211&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4744587760075123991&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-432981821009">Algorithms by Robert Sedgewick</a>.</li>
<li><a href="https://www.amazon.de/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X/ref=asc_df_026204630X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=526471224369&amp;hvpos=&amp;hvnetw=g&amp;hvrand=13700716644741673088&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-1268844537750&amp;psc=1&amp;th=1&amp;psc=1">Introduction to Algorithms by  Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein</a>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Waiting for Loom&#39;s Virtual Threads...</title>
            <link>https://savchenko.tech/posts/loom/</link>
            <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/loom/</guid>
            <description>Since Alan Turing time we came from running one program at a time on bare metal to running millions of java virtual threads. Which is absolutely impressive.
Why? Why should we care about threads at all? The answer is - performance. Applying concurrency can improve performance in a few ways:
reducing latency (process one task faster) hiding latency (process another task while waiting) increasing throughput (process more tasks). Current java concurrency implementation is based on the rule that one Java thread equals exactly one OS thread (one-to-one mapping).</description>
            <content type="html"><![CDATA[<p>Since Alan Turing time we came from running one program at a time on bare metal to running millions of java virtual threads.
Which is absolutely impressive.</p>
<p>Why? Why should we care about threads at all?
The answer is - performance.
Applying concurrency can improve performance in a few ways:</p>
<ul>
<li>reducing latency (process one task faster)</li>
<li>hiding latency (process another task while waiting)</li>
<li>increasing throughput (process more tasks).</li>
</ul>
<p>Current java concurrency implementation is based on the rule that one Java thread equals exactly one OS thread (one-to-one mapping).
This means that every <code>Thread.start()</code> creates a new OS thread.</p>
<p>Modern high-performance JVM applications are expected to handle tens of thousands concurrent connections.
And thread-per-connection architecture fails in this case.</p>
<p>So, there are 2 main disadvantages to the current model used in Java:</p>
<ul>
<li>threads are expensive to create</li>
<li>threads limit can be reached very easily.</li>
</ul>
<p>Project Loom is tackling this disadvantages.
The goal of Project loom is to enable easy-to-use, high-throughput lightweight concurrency and new programming models on the Java platform.
It will be done by removing involvement of the OS in the lifecycle of a virtual thread.
So, large-scale JVM applications will not be restricted to a few thousand OS threads.</p>
<h3 id="some-terminology">Some terminology</h3>
<p>Loom introduces next new constructs:</p>
<ul>
<li>Virtual threads</li>
<li>Continuations</li>
</ul>
<p><strong>Virtual thread</strong> is an implementation of threads provided by the Java runtime.
They are not one-to-one wrappers over OS threads.</p>
<p>Virtual thread has 2 components: continuation and scheduler.</p>
<p>A <strong>continuation</strong> is a sequence of instructions that execute sequentially, and may suspend itself.</p>
<p>A <strong>scheduler</strong> assigns continuations to CPU cores, replacing a paused one with another that&rsquo;s ready to run,
and ensuring that a continuation that is ready to resume will eventually be assigned to a CPU core.</p>
<p>A <strong>carrier thread</strong> is an OS thread that on which a virtual thread executes.
Over its lifetime, a single virtual thread may run on several different carrier threads.</p>
<h3 id="creating-virtual-threads">Creating virtual threads</h3>
<p>New syntax is not differ much from already existing threads functionality. This should not complicate adjusting of
an existing code.</p>
<p>New method is added for creating executor service. It creates 1 virtual thread per task.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>ExecutorService executorService <span style="color:#f92672">=</span> Executors.<span style="color:#a6e22e">newVirtualThreadPerTaskExecutor</span>();
</span></span></code></pre></div><p>And there is a builder on Thread class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Thread.<span style="color:#a6e22e">builder</span>().<span style="color:#a6e22e">virtual</span>().<span style="color:#a6e22e">task</span>(r).<span style="color:#a6e22e">build</span>();
</span></span></code></pre></div><p>So, I am reading &ldquo;Java concurrency in practice&rdquo;&hellip; and hoping that Loom will be released with Java 19 this fall.</p>
]]></content>
        </item>
        
        <item>
            <title>Pattern Matching in Java</title>
            <link>https://savchenko.tech/posts/patternmatching/</link>
            <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/patternmatching/</guid>
            <description>To reduce duplication (boilerplate) in code pattern matching with if statements and the instanceof operator was introduced with Java version 16.
Pattern matching is a technique of controlling program flow that only executes a section of code that meets certain criteria.
Pattern matching with if and instanceOf In code example without pattern matching cast is needed.
public Integer objectToString(Object object) { if (object instanceof String) { String string = (String) object; return Integer.</description>
            <content type="html"><![CDATA[<p>To reduce duplication (boilerplate) in code <strong>pattern matching with if statements and the instanceof operator</strong> was introduced with Java version 16.</p>
<blockquote>
<p><strong>Pattern matching</strong> is a technique of controlling program flow that only executes a section of code that meets certain criteria.</p>
</blockquote>
<h3 id="pattern-matching-with-if-and-instanceof">Pattern matching with if and instanceOf</h3>
<p>In code example without pattern matching cast is needed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">objectToString</span>(Object object) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (object <span style="color:#66d9ef">instanceof</span> String) {
</span></span><span style="display:flex;"><span>            String string <span style="color:#f92672">=</span> (String) object;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Integer.<span style="color:#a6e22e">parseInt</span>(string);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (object <span style="color:#66d9ef">instanceof</span> Integer) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (Integer) object;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> 0;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span></code></pre></div><p>With pattern matching we get immediate cast.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">objectToString</span>(Object object) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (object <span style="color:#66d9ef">instanceof</span> String strData) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Integer.<span style="color:#a6e22e">parseInt</span>(strData);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (object <span style="color:#66d9ef">instanceof</span> Integer intData) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> intData;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> 0;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>strData and intData are <strong>pattern variables</strong> here.</p>
<h3 id="pattern-matching-in-switch">Pattern matching in switch</h3>
<p>Pattern matching withing switch expression is supported by Java 17 but only as a Preview feature.</p>
<p>Same functionality with switch expression will look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">objectToString</span>(Object object) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">switch</span> (object) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> String strData <span style="color:#f92672">-&gt;</span> Integer.<span style="color:#a6e22e">parseInt</span>(strData);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> Integer intData <span style="color:#f92672">-&gt;</span> intData;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span> <span style="color:#f92672">-&gt;</span> 0;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Common Programming Paradigms Overview</title>
            <link>https://savchenko.tech/posts/paradigms/</link>
            <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/paradigms/</guid>
            <description>Why do we care about programming paradigms?
The answer is they help us to align with architectural concerns like boundaries, location and accessing data and algorithm foundation in the modules.
Programming paradigms are ways of programming that are reflected in language features. They tell us which structures to use and when to use them.
There are 3 such main paradigms:
structured programming
object-orient programming
functional programming.
Most languages are multi-paradigm but levels of restrictions/enforcing can be different.</description>
            <content type="html"><![CDATA[<p>Why do we care about programming paradigms?</p>
<p>The answer is they help us to align with architectural concerns like boundaries, location and accessing data and
algorithm foundation in the modules.</p>
<p>Programming paradigms are ways of programming that are reflected in language features.
They tell us which structures to use and when to use them.</p>
<p>There are 3 such main paradigms:</p>
<ul>
<li>
<p>structured programming</p>
</li>
<li>
<p>object-orient programming</p>
</li>
<li>
<p>functional programming.</p>
</li>
</ul>
<p>Most languages are multi-paradigm but levels of restrictions/enforcing can be different.
For example, both Java and Scala support object-orient and functional programming. At the same time level of enforcement
of the functional paradigm in Scala is much higher.</p>
<p>Programming paradigms show us what not to do by imposing discipline.</p>
<h3 id="1-structured-programming">1. Structured programming</h3>
<p><strong>Structured programming imposes discipline on direct transfer of control.</strong></p>
<p>It allows modules to be functionally decomposed.
The main value of this decomposition is ability to create falsifiable units. We can use tests to prove small functions
incorrect.</p>
<p>At the architectural level functional decomposition is considered one of the best practices.</p>
<h3 id="2-object-orient-oo-programming">2. Object-orient (OO) programming</h3>
<p><strong>Object-oriented programming imposes discipline on indirect transfer of control.</strong></p>
<p>Understanding of the principles of OO design is one more way to create good architecture.
The basics of OO are: encapsulation, inheritance and polymorphism.</p>
<p><strong>Encapsulation</strong> draws a line between data and functions that are hidden and functions that are known.
An example of encapsulation would be the private data members and the public member functions of a class.
But we can not say that OO depends on strong encapsulation. Some OO languages have little or no enforced encapsulation
(like Python, JavaScript and Ruby).</p>
<p><strong>Inheritance</strong> is a redeclaration of a group of variables and functions within an enclosing scope.
So data structures can be reused and extended in more convenient way.</p>
<p>Application of <strong>polymorphism</strong> allows us to invert any source code dependency.
With full control over the direction of all the source code dependencies plugin architecture can be used anywhere.</p>
<h3 id="3-functional-programming">3. Functional programming</h3>
<p><strong>Functional programming imposes discipline upon assignment.</strong></p>
<p>It restricts varying of variables. Mutating of variables lead to problems like race conditions,
deadlock conditions, and concurrent update.
You cannot have concurrent update problem if no variable is ever updated.</p>
<p>One of the common approaches in regard to immutability is to divide application to mutable and immutable components.
Another strategy to create entirely immutable application is to use event sourcing. With event sourcing we do not save
state, only transactions. When the state is needed, we apply all the transactions from the beginning of time.
This strategy wii require enough storage and enough processor power.</p>
<p>Sources:</p>
<p><a href="https://www.amazon.de/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164">Clean Architecture: A Craftsman&rsquo;s Guide to Software Structure and Design: A Craftsman&rsquo;s Guide to Software Structure and Design by Robert C. Martin</a></p>
]]></content>
        </item>
        
        <item>
            <title>SOLID Principles</title>
            <link>https://savchenko.tech/posts/solid/</link>
            <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/solid/</guid>
            <description>When building software systems we need to avoid a mess at any cost. The more messy software is, the more expensive is to change and maintain it.
Main design smells that lead to costs increase are:
rigidity - when tight coupling leads to major rebuild and makes it harder to make changes fragility - when inappropriate and insufficient isolation of software parts leads to one change cause other unrelated modules crash or misbehave immobility - when software structures can not be reused To avoid these design smells and make our software easy to change, understand and reuse we need a guide how to combine functions, data structures and classes - design principles.</description>
            <content type="html"><![CDATA[<p>When building software systems we need to avoid a mess at any cost.
The more messy software is, the more expensive is to change and maintain it.</p>
<p>Main design smells that lead to costs increase are:</p>
<ul>
<li>rigidity - when tight coupling leads to major rebuild and makes it harder to make changes</li>
<li>fragility - when inappropriate and insufficient isolation of software parts leads to one change cause other
unrelated modules crash or misbehave</li>
<li>immobility - when software structures can not be reused</li>
</ul>
<p>To avoid these design smells and make our software easy to change, understand and reuse we need
a guide how to combine functions, data structures and classes - design principles.</p>
<p>That is where <strong>SOLID principles</strong> come into play.</p>
<h3 id="1-the-single-responsibility-principle">1. The Single responsibility principle</h3>
<p>The main idea of this principle is to separate classes and
methods that each source file can have only one reason to change.
The benefit of such separation is low coupling and low fragility.</p>
<h3 id="2-the-open-closed-principle">2. The Open-Closed Principle</h3>
<p>A software artifact should be open for extension but closed for modification
For example, use of interfaces and dependency injection allows extending behavior without changing existing classes.</p>
<h3 id="3-the-liskov-substitution-principle">3. The Liskov Substitution Principle</h3>
<p>Software systems should be built from substitutable (interchangeable) parts.
If superclass does something, subclass should do it too (it should be substitutable for the superclass).
Example of the violation of LSP will be when subtype does less than superclass. Then you need to add additional
polluting behavior to your system.</p>
<h3 id="4-the-interface-segregation-principle">4. The Interface Segregation Principle</h3>
<p>Do not depend on things that you don’t use.
Interface should have only methods that specific client use.
Violation of this principle would be &ldquo;Fat class&rdquo;.</p>
<h3 id="5-the-dependency-inversion-principle">5. The Dependency Inversion Principle</h3>
<p>The code that implements high-level policy should not depend on the code that implements low-level details.</p>
<p>Sources:</p>
<p><a href="https://www.amazon.de/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164">Clean Architecture: A Craftsman&rsquo;s Guide to Software Structure and Design: A Craftsman&rsquo;s Guide to Software Structure and Design by Robert C. Martin</a></p>
]]></content>
        </item>
        
        <item>
            <title>gRPC Server Side Implementation Using Spring</title>
            <link>https://savchenko.tech/posts/grpcservice/</link>
            <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/grpcservice/</guid>
            <description>This article is describing how to create gRPC service implementation using Spring Boot.
You can find more details about gRPC in &amp;ldquo;Is gRPC a better choice over REST?&amp;rdquo;.
To create gRPC service you need to complete 3 tasks:
Create module for proto model and service definitions. Create module with server side implementation of gRPC. Test service with BloomRPC. 1. Generation of Proto model and service definition It will be Maven project.</description>
            <content type="html"><![CDATA[<p>This article is describing how to create gRPC service implementation using Spring Boot.</p>
<p>You can find more details about gRPC in <a href="https://savchenko.tech/posts/grpcvsrest/">&ldquo;Is gRPC a better choice over REST?&rdquo;</a>.</p>
<p>To create gRPC service you need to complete 3 tasks:</p>
<ol>
<li>Create module for proto model and service definitions.</li>
<li>Create module with server side implementation of gRPC.</li>
<li>Test service with BloomRPC.</li>
</ol>
<h3 id="1-generation-of-proto-model-and-service-definition">1. Generation of Proto model and service definition</h3>
<p>It will be Maven project. So, first you need to add all necessary dependencies to pom.xml.
For generating java source files from .proto file <a href="https://www.xolstice.org/protobuf-maven-plugin/">Maven Protocol Buffers Plugin</a>
will be used.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;project</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span style="color:#a6e22e">xmlns:xsi=</span><span style="color:#e6db74">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span style="display:flex;"><span>         <span style="color:#a6e22e">xsi:schemaLocation=</span><span style="color:#e6db74">&#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;modelVersion&gt;</span>4.0.0<span style="color:#f92672">&lt;/modelVersion&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;groupId&gt;</span>tech.contactvalidation<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>contact-proto<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;version&gt;</span>0.0.1-SNAPSHOT<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>contact-proto<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;description&gt;</span>Project for Proto Model and Service Definitions<span style="color:#f92672">&lt;/description&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;properties&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;java.version&gt;</span>17<span style="color:#f92672">&lt;/java.version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span style="color:#f92672">&lt;/project.build.sourceEncoding&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;maven.compiler.source&gt;</span>17<span style="color:#f92672">&lt;/maven.compiler.source&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;maven.compiler.target&gt;</span>17<span style="color:#f92672">&lt;/maven.compiler.target&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/properties&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>io.grpc<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>grpc-netty<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;version&gt;</span>1.37.0<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>io.grpc<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>grpc-protobuf<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;version&gt;</span>1.37.0<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>io.grpc<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>grpc-stub<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;version&gt;</span>1.37.0<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>org.apache.tomcat<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>annotations-api<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;version&gt;</span>6.0.53<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;scope&gt;</span>provided<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;extensions&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;extension&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;groupId&gt;</span>kr.motd.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;artifactId&gt;</span>os-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;version&gt;</span>1.7.0<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;/extension&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/extensions&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;groupId&gt;</span>org.xolstice.maven.plugins<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;artifactId&gt;</span>protobuf-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;version&gt;</span>0.6.1<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;protocArtifact&gt;</span>
</span></span><span style="display:flex;"><span>                        com.google.protobuf:protoc:3.6.1:exe:${os.detected.classifier}
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;/protocArtifact&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;pluginId&gt;</span>grpc-java<span style="color:#f92672">&lt;/pluginId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;pluginArtifact&gt;</span>
</span></span><span style="display:flex;"><span>                        io.grpc:protoc-gen-grpc-java:1.22.1:exe:${os.detected.classifier}
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;/pluginArtifact&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;protoSourceRoot&gt;</span>
</span></span><span style="display:flex;"><span>                        ${basedir}/src/main/proto/
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;/protoSourceRoot&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;/configuration&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;executions&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;execution&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">&lt;goals&gt;</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">&lt;goal&gt;</span>compile<span style="color:#f92672">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">&lt;goal&gt;</span>compile-custom<span style="color:#f92672">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">&lt;/goals&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&lt;/execution&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;/executions&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/build&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/project&gt;</span>
</span></span></code></pre></div><p>Secondly, you need to add .proto file.
<a href="https://developers.google.com/protocol-buffers/docs/proto3">Protocol buffer language guide</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-protobuf" data-lang="protobuf"><span style="display:flex;"><span>syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">package</span> contactvalidation;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">option</span> java_package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tech.contactvalidation&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">option</span> java_multiple_files <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">ContactValidationRequest</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> first_name <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> last_name <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> address <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">ContactValidationResponse</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> contact_state <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">service</span> ContactValidationService {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">rpc</span> validateContact(ContactValidationRequest) <span style="color:#66d9ef">returns</span> (ContactValidationResponse) {};<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p><a href="https://github.com/marinasavchenko/contact-proto">Git repo of service definition</a></p>
<h3 id="2server-side">2.Server side</h3>
<p>pom.xml of server side implementation should contain dependency to the service definition module and other necessary Spring Boot
dependencies.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;project</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span style="color:#a6e22e">xmlns:xsi=</span><span style="color:#e6db74">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span style="display:flex;"><span>         <span style="color:#a6e22e">xsi:schemaLocation=</span><span style="color:#e6db74">&#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;modelVersion&gt;</span>4.0.0<span style="color:#f92672">&lt;/modelVersion&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;parent&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-starter-parent<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;version&gt;</span>2.5.4<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/parent&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;groupId&gt;</span>tech.contactvalidation<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>contact-validation<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;version&gt;</span>0.0.1-SNAPSHOT<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>contact-validation<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;description&gt;</span>Contact validation Service<span style="color:#f92672">&lt;/description&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;properties&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;java.version&gt;</span>17<span style="color:#f92672">&lt;/java.version&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/properties&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>tech.contactvalidation<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>contact-proto<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;version&gt;</span>0.0.1-SNAPSHOT<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>net.devh<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>grpc-server-spring-boot-starter<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;version&gt;</span>2.12.0.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-devtools<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;scope&gt;</span>runtime<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;optional&gt;</span>true<span style="color:#f92672">&lt;/optional&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-starter-test<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/build&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/project&gt;</span>
</span></span></code></pre></div><p>To start up an application you need to add only 2 classes.
Simple Spring Boot application class for lunching an app.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@SpringBootApplication</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Application</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>        SpringApplication.<span style="color:#a6e22e">run</span>(Application.<span style="color:#a6e22e">class</span>, args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And Service class with @GrpcService annotation that extends your generated ServiceImplBase.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@GrpcService</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ContactValidationService</span> <span style="color:#66d9ef">extends</span> ContactValidationServiceGrpc.<span style="color:#a6e22e">ContactValidationServiceImplBase</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ContactService contactService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">validateContact</span>(ContactValidationRequest request, StreamObserver<span style="color:#f92672">&lt;</span>ContactValidationResponse<span style="color:#f92672">&gt;</span> responseObserver) {
</span></span><span style="display:flex;"><span>        String state <span style="color:#f92672">=</span> contactService.<span style="color:#a6e22e">validateContact</span>(request);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ContactValidationResponse response <span style="color:#f92672">=</span> ContactValidationResponse.<span style="color:#a6e22e">newBuilder</span>().<span style="color:#a6e22e">setContactState</span>(state).<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        responseObserver.<span style="color:#a6e22e">onNext</span>(response);
</span></span><span style="display:flex;"><span>        responseObserver.<span style="color:#a6e22e">onCompleted</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><a href="https://github.com/marinasavchenko/contact-validation-api">Git repo of server side gRPC implementation</a></p>
<h3 id="3testing">3.Testing</h3>
<p>You can test gRPC service with BloomRPC. Latest release can be
downloaded from <a href="https://github.com/bloomrpc/bloomrpc/releases">here</a>.
Simply add your .proto file to BloomRPC and you are ready to test.</p>
<p><img src="../../images/BloomPPCValid.jpg" alt="BloomPPCValid.jpg"></p>
<p><img src="../../images/BloomPPCInvalid.jpg" alt="BloomPPCInvalid.jpg"></p>
]]></content>
        </item>
        
        <item>
            <title>Tips for More Effective Public Speaking</title>
            <link>https://savchenko.tech/posts/effectivecommunication/</link>
            <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/effectivecommunication/</guid>
            <description>Effective public speaking is a crucial to your personal, professional and social success. At the same time many developers luck the confidence to communicate clearly, which leads to missing out on career opportunities.
The biggest threat to our confidence is anxiety, in other words - being nervous. Anxiety - is a signal that we are doing something important. So you can not get rid of it completely. But we do not want anxiety to prevent us from being ourselves and let our skills shine.</description>
            <content type="html"><![CDATA[<p>Effective public speaking is a crucial to your personal, professional and social success.
At the same time many developers luck the confidence to communicate clearly, which leads to missing out on
career opportunities.</p>
<p>The biggest threat to our confidence is <strong>anxiety</strong>, in other words - being nervous.
Anxiety - is a signal that we are doing something important. So you can not get rid of it completely.
But we do not want anxiety to prevent us from being ourselves and let our skills shine.</p>
<p>There are two parts of managing anxiety: reducing symptoms and dealing with sources.</p>
<h3 id="how-to-reduce-anxiety-symptoms">How to reduce anxiety symptoms</h3>
<ol>
<li>Increased hart rate</li>
</ol>
<blockquote>
<p>How to deal -&gt; deep belly breath before speaking</p>
</blockquote>
<ol start="2">
<li>Dry mouse</li>
</ol>
<blockquote>
<p>How to deal -&gt; warm water, chowing a gum before speaking</p>
</blockquote>
<ol start="3">
<li>Blushing and sweating</li>
</ol>
<blockquote>
<p>How to deal -&gt; hold something cold in your palm</p>
</blockquote>
<h3 id="how-to-deal-with-sources-of-anxiety">How to deal with sources of anxiety</h3>
<ol>
<li><strong>Greet anxiety</strong>, so nervousness does not make you even more nervous. It is ok to have it.</li>
<li><strong>Turn the focus into the audience</strong>. You are providing a value to people that are listening to you
by sharing your ideas.</li>
<li><strong>Communication is not a performance</strong>. It is a conversation. It is ok to make mistakes.
Use &ldquo;us&rdquo;, &ldquo;we&rdquo;, people&rsquo;s names to underline conversational language.</li>
</ol>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.com/Speaking-without-Freaking-Out-Techniques/dp/1465290478">Speaking Up without Freaking Out by Matthew Abrahams</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Is gRPC a Better Choice over REST?</title>
            <link>https://savchenko.tech/posts/grpcvsrest/</link>
            <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/grpcvsrest/</guid>
            <description>Communication protocols play essential role in every modern software system. With increasing popularity of Microservice architecture inter-process communication techniques become even more important.
The most common way to build request-response style communication is RESTful services. However, REST can be inefficient and error-prone to use in microservices. We would need something more scalable, loosely coupled and efficient. That is where gRPC will shine.
gRPC (the “g” stands for something different in every gRPC release) is an inter-process communication technology that allows you to connect, invoke, operate, and debug distributed heterogeneous applications as easily as making a local function call.</description>
            <content type="html"><![CDATA[<p>Communication protocols play essential role in every modern software system.
With increasing popularity of Microservice architecture inter-process communication techniques become even more important.</p>
<p>The most common way to build request-response style communication is RESTful services. However, REST can be
inefficient and error-prone to use in microservices. We would need something more scalable,
loosely coupled and efficient. That is where gRPC will shine.</p>
<blockquote>
<p><strong>gRPC</strong> (the “g” stands for something different in every gRPC release) is an inter-process communication technology that
allows you to
connect, invoke, operate, and debug distributed heterogeneous applications as easily as making a local function call.</p>
</blockquote>
<p>To develop gRPC application you need to create a service interface using IDL
(Interface Definition Language). From this service interface you can generate server-side (server skeleton)
and client-side (client stub) code with protocol buffer.</p>
<blockquote>
<p>Protocol buffer is a language-agnostic, platform-neutral, extensible mechanism to serializing structured data.</p>
</blockquote>
<p><img src="../../images/grpc2.png" alt="grpc2.png"></p>
<p>Why would you choose gRPC over REST or any other communication protocol?</p>
<h3 id="advantages-of-grpc">Advantages of gRPC</h3>
<ul>
<li>
<p><strong>Efficiency</strong>. gRPC is one of the most efficient inter-process communication technologies because
it uses a protocol buffer (binary based protocol) instead of a textual format such as JSON or XML.
What makes it even faster, that is implementation of protocol buffers on top of HTTP/2.</p>
</li>
<li>
<p><strong>Simplicity of schema and service interfaces</strong>.
gRPC offers a simple but consistent, reliable, and scalable application development experience
compared to using OpenAPI/Swagger for RESTful service.</p>
</li>
<li>
<p><strong>Strongly typed</strong>. gRPC service contracts clearly define the types that you
will be using for communication between the applications, which leads to stability
of distributed application development.</p>
</li>
<li>
<p><strong>Language-agnostic</strong>. gRPC is designed to work with different programming languages.</p>
</li>
<li>
<p><strong>Duplex streaming</strong>. It has native support for client- or server-side streaming.
This makes it much easier to develop streaming services or streaming clients.</p>
</li>
<li>
<p><strong>Built-in features</strong>. gRPC offers built-in support for features such as authentication, encryption,
resiliency (deadlines and timeouts), metadata exchange, compression, load balancing, service discovery.</p>
</li>
<li>
<p><strong>Integration with cloud native ecosystems</strong>. gRPC is part of the CNCF(Cloud Native Computing Foundation)
and most of the modern frameworks and technologies offer native support for gRPC out of the box.</p>
</li>
<li>
<p><strong>Widely used</strong>. gRPC has been tested and adopted by Google, Square, Lyft, Netflix, Docker, Cisco, and CoreOS.</p>
</li>
</ul>
<h3 id="disadvantages-of-grpc">Disadvantages of gRPC</h3>
<ul>
<li>
<p>Heavy gRPC service definition changes will require regeneration of the code for both client and server.
Smaller changes can be done without breaking the service contract by using different versions of a proto.</p>
</li>
<li>
<p>flexibility of the external-facing services can suffer, as consumers get less control.
The gRPC gateway is designed as a workaround to overcome this issue.</p>
</li>
</ul>
<p>So, the question is why don&rsquo;t you use gRPC yet?
I am going to. Coming soon &hellip; example of gRPC application.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.com/gRPC-Running-Building-Applications-Kubernetes/dp/1492058335">gRPC: Up and Running by Kasun Indrasiri and Danesh Kuruppu</a></li>
<li><a href="https://www.amazon.de/-/en/Sam-Newman/dp/1492034029/ref=sr_1_2?adgrpid=80999944246&amp;gclid=Cj0KCQjwsdiTBhD5ARIsAIpW8CJ1Uo11UWFGWDnqRavEqFlKgzulubAToF4mTBL9mrg6i8aLEcdX_3waAkf4EALw_wcB&amp;hvadid=394720771184&amp;hvdev=c&amp;hvlocphy=9042525&amp;hvnetw=g&amp;hvqmt=e&amp;hvrand=4149535554071059982&amp;hvtargid=kwd-300209693451&amp;hydadcr=25168_2136730&amp;keywords=baustellenmikrodienste&amp;qid=1651920380&amp;sr=8-2">Building Microservices by Sam Newman</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Team Framework</title>
            <link>https://savchenko.tech/posts/teamwork/</link>
            <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/teamwork/</guid>
            <description>If I have seen further than others, it is by standing upon the shoulders of giants.
Isaac Newton
Programming is not about coding it is about working with people. Sounds easy, isn&amp;rsquo;t it? You put people in one room, and somehow it all should magically work out.
The problem is that most people do not even come across as they intend to. I am not even talking about solving complex issues.</description>
            <content type="html"><![CDATA[<blockquote>
<p>If I have seen further than others, it is by standing upon the shoulders of giants.</p>
<p>Isaac Newton</p>
</blockquote>
<p>Programming is not about coding it is about working with people. Sounds easy, isn&rsquo;t it?
You put people in one room, and somehow it all should magically work out.<br>
The problem is that most people do not even come across as they intend to. I am not even talking about solving complex issues.
So, effective collaboration takes time and effort.</p>
<p>To be productive we should and have to stand on shoulders of others not only technology-wise but also communication-wise.
And team framework could be a great assistance here.</p>
<p>Team framework is an established set of practices that creates a solid base for an effective collaboration.
It is the way to productivity and happiness of each team member.</p>
<p>This set of practices should solve next problems:</p>
<ul>
<li>Prioritizing values</li>
<li>Resolving competing values (for example, excellence vs pragmatism, flexibility vs predictability)</li>
<li>Resolving conflicting views (for example, what to test and on which level)</li>
<li>Reducing time on discussing how things need to be done</li>
</ul>
<p>I see Extreme programming as a perfect starting point for team framework. Although it has never got the popularity it deserves,
parts of the methodology can and should be applied.</p>
<p>A philosophy of this methodology is based on the values of communication, simplicity, feedback, courage, and respect.</p>
<h3 id="communication">Communication</h3>
<p>Communication is crucial for creating a sense of team and effective cooperation.
Clear, honest communication relieves tension and improves credibility.</p>
<h3 id="simplicity">Simplicity</h3>
<p>Improving communication helps achieve simplicity by eliminating unneeded or deferrable requirements from today’s concerns.
Achieving simplicity gives you that much less to communicate about.</p>
<h3 id="feedback">Feedback</h3>
<p>Feedback is a critical part of communication.
At the same time, the simpler the system, the easier it is to get feedback about it.</p>
<h3 id="courage">Courage</h3>
<p>The courage is another crucial value that touches all areas of the software development process:</p>
<ul>
<li>The courage to speak truths, pleasant or unpleasant, fosters communication and trust.</li>
<li>The courage to discard failing solutions and seek new ones encourages simplicity.</li>
<li>The courage to seek real, concrete answers creates feedback.</li>
</ul>
<h3 id="respect">Respect</h3>
<p>For software development to simultaneously improve in humanity and productivity,
the contributions of each person in the team need to be respected.
&ldquo;I am important and so are you.&rdquo;</p>
<p>Application of the values in day-to-day life is done through the practices.
And practices don&rsquo;t make sense without the values which backing them up.</p>
<p>Here are the most important practices:</p>
<h4 id="1-the-whole-team">1. The whole team</h4>
<p>People need a sense of “team”:</p>
<ul>
<li>We belong.</li>
<li>We are in this together.</li>
<li>We support each other&rsquo;s work, growth, and learning.</li>
</ul>
<h4 id="2-energized-work">2. Energized Work</h4>
<p>When you’re sick, respect yourself and the rest of your team by resting and getting well.
Taking care of yourself is the quickest way back to energized work.</p>
<h4 id="3-pair-programming">3. Pair Programming</h4>
<p>Pair programming is a dialog between two people simultaneously programming (and analyzing and designing and testing)
and trying to program better.</p>
<p>Pair programmers:</p>
<ul>
<li>Keep each other on task.</li>
<li>Brainstorm refinements to the system.</li>
<li>Clarify ideas.</li>
<li>Take initiative when their partner is stuck, thus lowering frustration.</li>
<li>Hold each other accountable to the team’s practices.</li>
<li>Share  knowledge.</li>
</ul>
<h4 id="4-test-first-programming">4. Test-First Programming</h4>
<p>Writing a failing automated test before changing any code has next benefits:</p>
<ul>
<li>focusing on one piece of code (business logic)</li>
<li>producing loosely coupled, highly cohesive code</li>
<li>gaining trust of teammates</li>
<li>achieving clearness and effectiveness (code, refactor, test, code, refactor)</li>
</ul>
<h4 id="5-incremental-design">5. Incremental Design</h4>
<p>Design that is done close to when it is used is more efficient.
As your expertise grows in making changes to a running system in small, safe steps,
you can afford to defer more and more of the design investment.</p>
<p>I truly believe that having this kind of framework will make software development more enjoyable and effective.</p>
<p>Sources:</p>
<ol>
<li><a href="https://www.amazon.de/-/en/Kent-Beck/dp/0321278658">Extreme Programming Explained by Kent Back and Cynthia Andres</a></li>
<li><a href="https://www.amazon.de/-/en/Robert-C-Martin/dp/013691571X">Clean Craftsmanship: Disciplines, Standards, and Ethics by Robert C. Martin</a></li>
<li><a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073">The Clean Coder: A Code of Conduct for Professional Programmers by Robert C. Martin</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Once Again About the Testing</title>
            <link>https://savchenko.tech/posts/testing/</link>
            <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/testing/</guid>
            <description>Effective software testing should minimize the amount of defects and maximize stability of the product. Achieving it in practice can be quite effortful. What to test? How many test cases? Who should test?
Questions what to test and on which level can be answered by testing pyramid. 1. Unit testing Unit testing is a type of testing where system under test is an individual unit and is done during the coding phase.</description>
            <content type="html"><![CDATA[<p>Effective software testing should minimize the amount of defects and maximize stability of the product.
Achieving it in practice can be quite effortful. What to test? How many test cases? Who should test?</p>
<p>Questions what to test and on which level can be answered by testing pyramid.
<img src="../../images/testing.png" alt="testing.png"></p>
<h3 id="1-unit-testing">1. Unit testing</h3>
<p>Unit testing is a type of testing where system under test is an individual unit and is done during the coding phase.
A unit may be an individual method, module or object.</p>
<p>Advantages:</p>
<ul>
<li>Speed: unit tests are fast (one usually takes several milliseconds)</li>
<li>Control: unit test are easy to control by providing different inputs and asserting output</li>
<li>Relatively easy to write: usually additional set up is not required. Exceptions may be the use of frameworks.</li>
</ul>
<p>Disadvantages:</p>
<ul>
<li>Disconnection with reality: unit tests do not fully represent the real execution</li>
<li>Many bugs can not be caught in unit tests, only on higher testing levels</li>
</ul>
<h3 id="2-integration-testing">2. Integration testing</h3>
<p>Integration testing is the test level used to test the integration between the code and external parties (very often database).</p>
<ul>
<li>The main advantages of an integration test is the ability to catch more bugs and if necessary debug the application to identify the problem.</li>
<li>The main disadvantage is that this type of tests is more difficult to write.</li>
</ul>
<h3 id="3-system-testing">3. System testing</h3>
<p>System Testing is testing the system as a whole. This type of test checks if given input X, the system will provide output Y.</p>
<p>Advantages:</p>
<ul>
<li>Very realistic</li>
</ul>
<p>Disadvantages:</p>
<ul>
<li>Slow</li>
<li>Harder to write</li>
<li>Flaky</li>
</ul>
<h3 id="what-to-test-on-different-levels">What to test on different levels?</h3>
<p>That can depend on many peculiarities of the software system. Guides that works for me:</p>
<ul>
<li>all business logic should be covered by unit tests - no exceptions</li>
<li>part that are using database should be covered by integration tests</li>
<li>at least one system test should be present to check that system is working</li>
</ul>
<p>Additional sources:</p>
<ol>
<li><a href="https://www.manning.com/books/effective-software-testing">Effective software testing by Maurício Aniche</a></li>
<li><a href="https://www.manning.com/books/unit-testing">Unit Testing Principles, Practices, and Patterns by Vladimir Khorikov</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Continuous Learning</title>
            <link>https://savchenko.tech/posts/learningframework/</link>
            <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>https://savchenko.tech/posts/learningframework/</guid>
            <description>Learning is the crucial tool on the road to mastery and true driver of the software craftsman career. There is no way one can become successful at software development without becoming an expert in learning.
I believe that effective learning contains of components so called learning framework. This framework can be applied to any kind of learning. It does not meter if it is learning the language or preparing for the OCP (Oracle Certified Professional) exam.</description>
            <content type="html"><![CDATA[<p>Learning is the crucial tool on the road to mastery and true driver of the software craftsman career.
There is no way one can become successful at software development without becoming an expert in learning.</p>
<p>I believe that effective learning contains of components so called learning framework.
This framework can be applied to any kind of learning. It does not meter if it is learning the language or preparing for the
OCP (Oracle Certified Professional) exam.</p>
<p>So, what are those components?</p>
<h3 id="1-reflect">1. Reflect</h3>
<p>Analyzing what works and what doesn&rsquo;t can make any learning path much easier. For example, for me personally,
morning studying sessions are much productive than evening ones. The same is with the time right after lunch.
So, scheduling any learning activities at these time slots would be a bad idea from the beginning.</p>
<h3 id="2-schedule-smart">2. Schedule smart</h3>
<p>Next step after having a clear picture of the &ldquo;dos and don&rsquo;ts&rdquo; is to schedule studying sessions at the right time/place.
I can not emphasize enough how helpful was using Pomodoro technique.</p>
<blockquote>
<h4 id="what-is-pomodoro-technique-">What is Pomodoro technique ?</h4>
<p>The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s.
It uses a timer to break work into intervals, typically 25 minutes in length, separated by short breaks.</p>
</blockquote>
<p>Even though it may seem like unnecessary interruption of the process, making pauses lead to feeling less tired in the end of the day.</p>
<h3 id="3-be-consistent-and-self-disciplined">3. Be consistent and self-disciplined</h3>
<p>After the scheduling of sessions the most important thing is &ldquo;sticking to the plan&rdquo;.
The key to &ldquo;studying no meter what&rdquo; is to fight procrastination and do not rely on motivation.</p>
<p>So, these components made a difference in my learning process.
At the same time hard work doesn&rsquo;t go anywhere. In times of social networks and endless streaming services one needs to chose to do the work.</p>
<p>For deep dive into learning strategies here are some useful sources:</p>
<ol>
<li><a href="https://www.coursera.org/learn/learning-how-to-learn">Learning How to Learn: Powerful mental tools to help you master tough subjects</a></li>
<li><a href="https://www.amazon.de/Mind-Numbers-Science-Flunked-Algebra/dp/039916524X/ref=asc_df_039916524X/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310692850252&amp;hvpos=&amp;hvnetw=g&amp;hvrand=15568758758955875913&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-404584213199&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=59921745817&amp;hvpone=&amp;hvptwo=&amp;hvadid=310692850252&amp;hvpos=&amp;hvnetw=g&amp;hvrand=15568758758955875913&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-404584213199">Mind for numbers</a></li>
<li><a href="https://www.amazon.de/Deep-Work-Focused-Success-Distracted/dp/0349411905/ref=asc_df_0349411905/?tag=googshopde-21&amp;linkCode=df0&amp;hvadid=310697853008&amp;hvpos=&amp;hvnetw=g&amp;hvrand=1376306110817819729&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-347635764187&amp;psc=1&amp;th=1&amp;psc=1&amp;tag=&amp;ref=&amp;adgrpid=62150065136&amp;hvpone=&amp;hvptwo=&amp;hvadid=310697853008&amp;hvpos=&amp;hvnetw=g&amp;hvrand=1376306110817819729&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9042525&amp;hvtargid=pla-347635764187">Deep Work: Rules for Focused Success in a Distracted World</a></li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
